<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">

    <title>LIC</title>
    <link rel="shortcut icon" type="image/x-icon" href="http://localhost:8888/static/base/images/favicon.ico?v=4e6c6be5716444f7ac7b902e7f388939">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <link rel="stylesheet" href="LIC_files/jquery-ui.css" type="text/css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    


<script type="text/javascript" src="LIC_files/MathJax.js" charset="utf-8"></script>

<script type="text/javascript">
// MathJax disabled, set as null to distingish from *missing* MathJax,
// where it will be undefined, and should prompt a dialog later.
window.mathjax_url = "https://cdn.mathjax.org/mathjax/latest/MathJax.js";
</script>

<link rel="stylesheet" href="LIC_files/bootstrap-tour.css" type="text/css">
<link rel="stylesheet" href="LIC_files/codemirror.css">


    <link rel="stylesheet" href="LIC_files/style.css" type="text/css">
    

<link rel="stylesheet" href="LIC_files/override.css" type="text/css">


    <link rel="stylesheet" href="LIC_files/custom.css" type="text/css">
    <script src="LIC_files/require.js" type="text/javascript" charset="utf-8"></script>
    <script>
      require.config({
          baseUrl: '/static/',
          paths: {
            nbextensions : '/nbextensions',
            underscore : '/static/components/underscore/underscore-min.js?v=ca26dc8cdf5d413cd8d3b62490e28210',
            backbone : '/static/components/backbone/backbone-min.js?v=dd2e6c2643968f7932487454302f407d',
          },
          shim: {
            underscore: {
              exports: '_'
            },
            backbone: {
              deps: ["underscore", "jquery"],
              exports: "Backbone"
            }
          }
      });
    </script>

    
    

<script src="LIC_files/marked.js" data-requiremodule="components/marked/lib/marked" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/init.js" data-requiremodule="widgets/js/init" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/bootstrap-tour.js" data-requiremodule="components/bootstrap-tour/build/js/bootstrap-tour.min" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_bool.js" data-requiremodule="widgets/js/widget_bool" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_button.js" data-requiremodule="widgets/js/widget_button" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_container.js" data-requiremodule="widgets/js/widget_container" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_float.js" data-requiremodule="widgets/js/widget_float" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_image.js" data-requiremodule="widgets/js/widget_image" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_int.js" data-requiremodule="widgets/js/widget_int" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_selection.js" data-requiremodule="widgets/js/widget_selection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_selectioncontainer.js" data-requiremodule="widgets/js/widget_selectioncontainer" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget_string.js" data-requiremodule="widgets/js/widget_string" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/widget.js" data-requiremodule="widgets/js/widget" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/manager.js" data-requiremodule="widgets/js/manager" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/underscore-min.js" data-requiremodule="underscore" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="LIC_files/backbone-min.js" data-requiremodule="backbone" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Hover_Arrow {position: absolute; width: 15px; height: 11px; cursor: pointer}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">.MathJax_Preview .MJXc-math {color: inherit!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXc-script {font-size: .8em}
.MJXc-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXc-bold {font-weight: bold}
.MJXc-italic {font-style: italic}
.MJXc-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXc-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXc-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXc-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXc-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXc-largeop {font-size: 150%}
.MJXc-largeop.MJXc-int {vertical-align: -.2em}
.MJXc-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXc-display {display: block; text-align: center; margin: 1em 0}
.MJXc-math span {display: inline-block}
.MJXc-box {display: block!important; text-align: center}
.MJXc-box:after {content: " "}
.MJXc-rule {display: block!important; margin-top: .1em}
.MJXc-char {display: block!important}
.MJXc-mo {margin: 0 .15em}
.MJXc-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXc-denom {display: inline-table!important; width: 100%}
.MJXc-denom > * {display: table-row!important}
.MJXc-surd {vertical-align: top}
.MJXc-surd > * {display: block!important}
.MJXc-script-box > *  {display: table!important; height: 50%}
.MJXc-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXc-script-box > *:last-child > * {vertical-align: bottom}
.MJXc-script-box > * > * > * {display: block!important}
.MJXc-mphantom {visibility: hidden}
.MJXc-munderover {display: inline-table!important}
.MJXc-over {display: inline-block!important; text-align: center}
.MJXc-over > * {display: block!important}
.MJXc-munderover > * {display: table-row!important}
.MJXc-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXc-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXc-mtr {display: table-row!important}
.MJXc-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXc-mtr > .MJXc-mtd:first-child {padding-left: 0}
.MJXc-mtr:first-child > .MJXc-mtd {padding-top: 0}
.MJXc-mlabeledtr {display: table-row!important}
.MJXc-mlabeledtr > .MJXc-mtd:first-child {padding-left: 0}
.MJXc-mlabeledtr:first-child > .MJXc-mtd {padding-top: 0}
.MJXc-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXc-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXc-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXc-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXc-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXc-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXc-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXc-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXc-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXc-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXc-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_CHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 0; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?rev=2.5.1') format('opentype')}
@font-face {font-family: MathJax_Main; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?rev=2.5.1') format('opentype'); font-weight: bold}
@font-face {font-family: MathJax_Main; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?rev=2.5.1') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Math; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?rev=2.5.1') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Caligraphic; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?rev=2.5.1') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?rev=2.5.1') format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?rev=2.5.1') format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?rev=2.5.1') format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?rev=2.5.1') format('woff'), url('https://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?rev=2.5.1') format('opentype')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>

<body data-project="C:\Users\Chris" data-base-url="/" data-notebook-name="LIC.ipynb" data-notebook-path="" class="notebook_app"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px none; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div style="display: none;" id="MathJax_Message"></div>

<noscript>
    <div id='noscript'>
      IPython Notebook requires JavaScript.<br>
      Please enable it to proceed.
  </div>
</noscript>

<div style="display: block;" id="header" class="navbar navbar-static-top border-box-sizing">
  <div class="navbar-inner navbar-nobg">
    <div class="container">
    <div id="ipython_notebook" class="nav brand pull-left"><a href="http://localhost:8888/tree/" alt="dashboard"><img src="LIC_files/ipynblogo.png" alt="IPython Notebook"></a></div>

    

      <span id="login_widget">
        
      </span>

    

    

<span id="save_widget" class="nav pull-left">
    <span id="notebook_name">LIC</span>
    <span id="checkpoint_status">Last Checkpoint: Apr 07 01:00</span>
    <span id="autosave_status">(autosaved)</span>
</span>


    </div>
  </div>
</div>

<div style="display: block;" class="border-box-sizing" id="site">


<div id="menubar-container" class="container">
<div class="border-box-sizing" id="menubar">
<div class="navbar">
  <div class="navbar-inner">
    <div class="container">
    <ul id="menus" class="nav">
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">File</a>
            <ul id="file_menu" class="dropdown-menu">
                <li id="new_notebook" title="Make a new notebook (Opens a new window)">
                    <a href="#">New</a></li>
                <li id="open_notebook" title="Opens a new window with the Dashboard view">
                    <a href="#">Open...</a></li>
                <!-- <hr/> -->
                <li class="divider"></li>
                <li id="copy_notebook" title="Open a copy of this notebook's contents and start a new kernel">
                    <a href="#">Make a Copy...</a></li>
                <li id="rename_notebook"><a href="#">Rename...</a></li>
                <li id="save_checkpoint"><a href="#">Save and Checkpoint</a></li>
                <!-- <hr/> -->
                <li class="divider"></li>
                <li id="restore_checkpoint" class="dropdown-submenu"><a href="#">Revert to Checkpoint</a>
                  <ul class="dropdown-menu"><li><a href="#">Apr 07 01:00:17</a></li></ul>
                </li>
                <li class="divider"></li>
                <li id="print_preview"><a href="#">Print Preview</a></li>
                <li class="dropdown-submenu"><a href="#">Download as</a>
                    <ul class="dropdown-menu">
                        <li id="download_ipynb"><a href="#">IPython Notebook (.ipynb)</a></li>
                        <li id="download_py"><a href="#">Python (.py)</a></li>
                        <li id="download_html"><a href="#">HTML (.html)</a></li>
                        <li id="download_rst"><a href="#">reST (.rst)</a></li>
                    </ul>
                </li>
                <li class="divider"></li>
                <li class="disabled" id="trust_notebook" title="Trust the output of this notebook">
                    <a href="#">Trusted Notebook</a></li>
                <li class="divider"></li>
                <li id="kill_and_exit" title="Shutdown this notebook's kernel, and close this window">
                    <a href="#">Close and halt</a></li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Edit</a>
            <ul id="edit_menu" class="dropdown-menu">
                <li id="cut_cell"><a href="#">Cut Cell</a></li>
                <li id="copy_cell"><a href="#">Copy Cell</a></li>
                <li id="paste_cell_above" class="disabled"><a href="#">Paste Cell Above</a></li>
                <li id="paste_cell_below" class="disabled"><a href="#">Paste Cell Below</a></li>
                <li id="paste_cell_replace" class="disabled"><a href="#">Paste Cell &amp; Replace</a></li>
                <li id="delete_cell"><a href="#">Delete Cell</a></li>
                <li id="undelete_cell" class="disabled"><a href="#">Undo Delete Cell</a></li>
                <li class="divider"></li>
                <li id="split_cell"><a href="#">Split Cell</a></li>
                <li id="merge_cell_above"><a href="#">Merge Cell Above</a></li>
                <li id="merge_cell_below"><a href="#">Merge Cell Below</a></li>
                <li class="divider"></li>
                <li id="move_cell_up"><a href="#">Move Cell Up</a></li>
                <li id="move_cell_down"><a href="#">Move Cell Down</a></li>
                <li class="divider"></li>
                <li id="edit_nb_metadata"><a href="#">Edit Notebook Metadata</a></li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">View</a>
            <ul id="view_menu" class="dropdown-menu">
                <li id="toggle_header" title="Show/Hide the IPython Notebook logo and notebook title (above menu bar)">
                    <a href="#">Toggle Header</a></li>
                <li id="toggle_toolbar" title="Show/Hide the action icons (below menu bar)">
                    <a href="#">Toggle Toolbar</a></li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Insert</a>
            <ul id="insert_menu" class="dropdown-menu">
                <li id="insert_cell_above" title="Insert an empty Code cell above the currently active cell">
                    <a href="#">Insert Cell Above</a></li>
                <li id="insert_cell_below" title="Insert an empty Code cell below the currently active cell">
                    <a href="#">Insert Cell Below</a></li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Cell</a>
            <ul id="cell_menu" class="dropdown-menu">
                <li id="run_cell" title="Run this cell, and move cursor to the next one">
                    <a href="#">Run</a></li>
                <li id="run_cell_select_below" title="Run this cell, select below">
                    <a href="#">Run and Select Below</a></li>
                <li id="run_cell_insert_below" title="Run this cell, insert below">
                    <a href="#">Run and Insert Below</a></li>
                <li id="run_all_cells" title="Run all cells in the notebook">
                    <a href="#">Run All</a></li>
                <li id="run_all_cells_above" title="Run all cells above (but not including) this cell">
                    <a href="#">Run All Above</a></li>
                <li id="run_all_cells_below" title="Run this cell and all cells below it">
                    <a href="#">Run All Below</a></li>
                <li class="divider"></li>
                <li id="change_cell_type" class="dropdown-submenu" title="All cells in the notebook have a cell type. By default, new cells are created as 'Code' cells">
                    <a href="#">Cell Type</a>
                    <ul class="dropdown-menu">
                      <li id="to_code" title="Contents will be sent to the kernel for execution, and output will display in the footer of cell">
                          <a href="#">Code</a></li>
                      <li id="to_markdown" title="Contents will be rendered as HTML and serve as explanatory text">
                          <a href="#">Markdown</a></li>
                      <li id="to_raw" title="Contents will pass through nbconvert unmodified">
                          <a href="#">Raw NBConvert</a></li>
                      <li id="to_heading1"><a href="#">Heading 1</a></li>
                      <li id="to_heading2"><a href="#">Heading 2</a></li>
                      <li id="to_heading3"><a href="#">Heading 3</a></li>
                      <li id="to_heading4"><a href="#">Heading 4</a></li>
                      <li id="to_heading5"><a href="#">Heading 5</a></li>
                      <li id="to_heading6"><a href="#">Heading 6</a></li>
                    </ul>
                </li>
                <li class="divider"></li>
                <li id="current_outputs" class="dropdown-submenu"><a href="#">Current Output</a>
                    <ul class="dropdown-menu">
                        <li id="toggle_current_output" title="Hide/Show the output of the current cell">
                            <a href="#">Toggle</a>
                        </li>
                        <li id="toggle_current_output_scroll" title="Scroll the output of the current cell">
                            <a href="#">Toggle Scrolling</a>
                        </li>
                        <li id="clear_current_output" title="Clear the output of the current cell">
                            <a href="#">Clear</a>
                        </li>
                    </ul>
                </li>
                <li id="all_outputs" class="dropdown-submenu"><a href="#">All Output</a>
                    <ul class="dropdown-menu">
                        <li id="toggle_all_output" title="Hide/Show the output of all cells">
                            <a href="#">Toggle</a>
                        </li>
                        <li id="toggle_all_output_scroll" title="Scroll the output of all cells">
                            <a href="#">Toggle Scrolling</a>
                        </li>
                        <li id="clear_all_output" title="Clear the output of all cells">
                            <a href="#">Clear</a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Kernel</a>
            <ul id="kernel_menu" class="dropdown-menu">
                <li id="int_kernel" title="Send KeyboardInterrupt (CTRL-C) to the Kernel">
                    <a href="#">Interrupt</a></li>
                <li id="restart_kernel" title="Restart the Kernel">
                    <a href="#">Restart</a></li>
            </ul>
        </li>
        <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Help</a>
            <ul id="help_menu" class="dropdown-menu">
                <li id="notebook_tour" title="A quick tour of the notebook user interface"><a href="#">User Interface Tour</a></li>
                <li id="keyboard_shortcuts" title="Opens a tooltip with all keyboard shortcuts"><a href="#">Keyboard Shortcuts</a></li>
                <li class="divider"></li>
                

                
                    
                        <li><a href="http://ipython.org/documentation.html" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        IPython Help
                        </a></li>
                    
                        <li><a href="http://nbviewer.ipython.org/github/ipython/ipython/tree/2.x/examples/Index.ipynb" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        Notebook Help
                        </a></li>
                    
                    
                        <li class="divider"></li>
                    
                
                    
                        <li><a href="http://docs.python.org/" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        Python
                        </a></li>
                    
                        <li><a href="http://help.github.com/articles/github-flavored-markdown" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        Markdown
                        </a></li>
                    
                        <li><a href="http://docs.scipy.org/doc/numpy/reference/" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        NumPy
                        </a></li>
                    
                        <li><a href="http://docs.scipy.org/doc/scipy/reference/" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        SciPy
                        </a></li>
                    
                        <li><a href="http://matplotlib.org/contents.html" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        Matplotlib
                        </a></li>
                    
                        <li><a href="http://docs.sympy.org/latest/index.html" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        SymPy
                        </a></li>
                    
                        <li><a href="http://pandas.pydata.org/pandas-docs/stable/" target="_blank" title="Opens in a new window">
                        <i class="icon-external-link menu-icon pull-right"></i>
                        pandas
                        </a></li>
                    
                    
                
                
            </ul>
        </li>
    </ul>
    <div id="kernel_indicator" class="indicator_area pull-right">
       <i title="Kernel Idle" class="kernel_idle_icon" id="kernel_indicator_icon"></i>
    </div>
    <div id="modal_indicator" class="indicator_area pull-right">
       <i title="Command Mode" class="command_mode_icon" id="modal_indicator_icon"></i>
    </div>
    <div id="notification_area"><div style="display: none;" class="notification_widget pull-right border-box-sizing" id="notification_kernel"><span></span></div><div style="display: none;" class="notification_widget pull-right border-box-sizing" id="notification_notebook"><span></span></div></div>
    </div>
  </div>
</div>
</div>
<div id="maintoolbar" class="navbar">
  <div class="toolbar-inner navbar-inner navbar-nobg">
    <div id="maintoolbar-container" class="container border-box-sizing toolbar"><div class="btn-group"><button id="save_b" title="Save and Checkpoint" class="btn"><i class="icon-save"></i></button></div><div id="insert_above_below" class="btn-group"><button id="insert_below_b" title="Insert Cell Below" class="btn"><i class="icon-plus-sign"></i></button></div><div id="cut_copy_paste" class="btn-group"><button id="cut_b" title="Cut Cell" class="btn"><i class="icon-cut"></i></button><button id="copy_b" title="Copy Cell" class="btn"><i class="icon-copy"></i></button><button id="paste_b" title="Paste Cell Below" class="btn"><i class="icon-paste"></i></button></div><div id="move_up_down" class="btn-group"><button id="move_up_b" title="Move Cell Up" class="btn"><i class="icon-arrow-up"></i></button><button id="move_down_b" title="Move Cell Down" class="btn"><i class="icon-arrow-down"></i></button></div><div id="run_int" class="btn-group"><button id="run_b" title="Run Cell" class="btn"><i class="icon-play"></i></button><button id="interrupt_b" title="Interrupt" class="btn"><i class="icon-stop"></i></button><button id="repeat_b" title="Restart Kernel" class="btn"><i class="icon-repeat"></i></button></div><select id="cell_type"><option selected="selected" value="code">Code</option><option value="markdown">Markdown</option><option value="raw">Raw NBConvert</option><option value="heading1">Heading 1</option><option value="heading2">Heading 2</option><option value="heading3">Heading 3</option><option value="heading4">Heading 4</option><option value="heading5">Heading 5</option><option value="heading6">Heading 6</option></select><span class="navbar-text">Cell Toolbar:</span><select id="ctb_select"><option selected="selected" value="">None</option><option value="Edit Metadata">Edit Metadata</option><option value="Raw Cell Format">Raw Cell Format</option><option value="Slideshow">Slideshow</option></select></div>
  </div>
</div>
</div>

<div style="height: 952px;" class="border-box-sizing" id="ipython-main-app">

    <div class="border-box-sizing" id="notebook_panel">
        <div style="height: 944px;" tabindex="-1" class="border-box-sizing" id="notebook"><div id="notebook-container" class="container"><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h1 id="Common-code
">Common code<a href="#Common-code%0A" class="anchor-link">¶</a></h1>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[1]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59999px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 331px; margin-left: 0px; min-height: 147px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">from</span> <span class="cm-variable">SALib</span>.<span class="cm-variable">sample</span> <span class="cm-keyword">import</span> <span class="cm-variable">saltelli</span></pre><pre><span class="cm-keyword">from</span> <span class="cm-variable">SALib</span>.<span class="cm-variable">analyze</span> <span class="cm-keyword">import</span> <span class="cm-variable">sobol</span></pre><pre><span class="cm-keyword">from</span> <span class="cm-variable">SALib</span>.<span class="cm-variable">test_functions</span> <span class="cm-keyword">import</span> <span class="cm-variable">Ishigami</span></pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">math</span></pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">h5py</span></pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">numpy</span> <span class="cm-keyword">as</span> <span class="cm-variable">np</span></pre><pre><span class="cm-keyword">from</span> <span class="cm-variable">scipy</span> <span class="cm-keyword">import</span> <span class="cm-variable">interpolate</span></pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">matplotlib</span>.<span class="cm-variable">pyplot</span> <span class="cm-keyword">as</span> <span class="cm-variable">plt</span></pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 147px;"></div><div style="display: none; height: 147px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><p>You can/should run the library code (at the end of the document) now.</p>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[2]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.60004px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 835px; margin-left: 0px; min-height: 300px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-variable">isabel</span> = <span class="cm-builtin">True</span></pre><pre><span class="cm-keyword">if</span> (<span class="cm-variable">isabel</span>):</pre><pre>    <span class="cm-variable">f</span> = <span class="cm-variable">h5py</span>.<span class="cm-variable">File</span>(<span class="cm-string">"C:\Users\Chris\Desktop\UNIK4660\LineIntegralConvolution\data\isabel_2d.h5"</span>, <span class="cm-string">"r"</span>)</pre><pre>    <span class="cm-variable">y</span> = <span class="cm-variable">f</span>[<span class="cm-string">'Velocity/X-comp'</span>][:] <span class="cm-comment"># Poor man's transformation from left to right handed coordinate systems</span></pre><pre>    <span class="cm-variable">x</span> = <span class="cm-variable">f</span>[<span class="cm-string">'Velocity/Y-comp'</span>][:] </pre><pre><span class="cm-keyword">else</span>:</pre><pre>    <span class="cm-variable">f</span> = <span class="cm-variable">h5py</span>.<span class="cm-variable">File</span>(<span class="cm-string">"C:\Users\Chris\Desktop\UNIK4660\LineIntegralConvolution\data\metsim1_2d.h5"</span>, <span class="cm-string">"r"</span>)</pre><pre>    <span class="cm-variable">x</span> = <span class="cm-variable">f</span>[<span class="cm-string">'Velocity/X-comp'</span>][:] <span class="cm-comment"># Already in correct coordinate system</span></pre><pre>    <span class="cm-variable">y</span> = <span class="cm-variable">f</span>[<span class="cm-string">'Velocity/Y-comp'</span>][:] </pre><pre>&nbsp;</pre><pre><span class="cm-variable">s</span> = <span class="cm-variable">np</span>.<span class="cm-variable">sqrt</span>(<span class="cm-variable">x</span><span class="cm-operator">*</span><span class="cm-variable">x</span><span class="cm-operator">+</span><span class="cm-variable">y</span><span class="cm-operator">*</span><span class="cm-variable">y</span>)</pre><pre><span class="cm-variable">width</span> = <span class="cm-builtin">len</span>(<span class="cm-variable">x</span>)</pre><pre><span class="cm-variable">height</span> = <span class="cm-builtin">len</span>(<span class="cm-variable">y</span>)</pre><pre><span class="cm-variable">mask</span> = <span class="cm-variable">np</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">width</span>,<span class="cm-variable">height</span>))</pre><pre><span class="cm-variable">mask</span>[<span class="cm-variable">np</span>.<span class="cm-variable">nonzero</span>(<span class="cm-variable">s</span>)] = <span class="cm-number">1.0</span></pre><pre><span class="cm-variable">invMask</span> = <span class="cm-variable">np</span>.<span class="cm-variable">add</span>(<span class="cm-operator">-</span><span class="cm-number">1.</span> <span class="cm-operator">*</span> <span class="cm-variable">mask</span>, <span class="cm-number">1.</span>) <span class="cm-comment"># for some reason using np.zeros() throws an error</span></pre><pre><span class="cm-variable">f</span>.<span class="cm-variable">close</span>()</pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 300px;"></div><div style="display: none; height: 300px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[3]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.60004px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 419px; margin-left: 0px; min-height: 181px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-variable">rx</span> = <span class="cm-variable">np</span>.<span class="cm-variable">arange</span>(<span class="cm-number">0</span>,<span class="cm-variable">width</span>,<span class="cm-number">1</span>)</pre><pre><span class="cm-variable">ry</span> = <span class="cm-variable">np</span>.<span class="cm-variable">arange</span>(<span class="cm-number">0</span>,<span class="cm-variable">height</span>,<span class="cm-number">1</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-variable">cubicInterpolation</span> = <span class="cm-builtin">False</span></pre><pre><span class="cm-keyword">if</span> (<span class="cm-variable">cubicInterpolation</span>):</pre><pre>    <span class="cm-variable">X</span> = <span class="cm-variable">interpolate</span>.<span class="cm-variable">interp2d</span>(<span class="cm-variable">rx</span>,<span class="cm-variable">ry</span>,<span class="cm-variable">x</span>,<span class="cm-variable">kind</span>=<span class="cm-string">'cubic'</span>)</pre><pre>    <span class="cm-variable">Y</span> = <span class="cm-variable">interpolate</span>.<span class="cm-variable">interp2d</span>(<span class="cm-variable">rx</span>,<span class="cm-variable">ry</span>,<span class="cm-variable">y</span>,<span class="cm-variable">kind</span>=<span class="cm-string">'cubic'</span>) </pre><pre><span class="cm-keyword">else</span>:</pre><pre>    <span class="cm-variable">X</span> = <span class="cm-variable">interpolate</span>.<span class="cm-variable">interp2d</span>(<span class="cm-variable">rx</span>,<span class="cm-variable">ry</span>,<span class="cm-variable">x</span>,<span class="cm-variable">kind</span>=<span class="cm-string">'linear'</span>)</pre><pre>    <span class="cm-variable">Y</span> = <span class="cm-variable">interpolate</span>.<span class="cm-variable">interp2d</span>(<span class="cm-variable">rx</span>,<span class="cm-variable">ry</span>,<span class="cm-variable">y</span>,<span class="cm-variable">kind</span>=<span class="cm-string">'linear'</span>) </pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 181px;"></div><div style="display: none; height: 181px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h1 id="Streamlines
">Streamlines<a href="#Streamlines%0A" class="anchor-link">¶</a></h1>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell rendered command_mode unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[5]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 277.6px; left: 69.6px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 1035px; margin-left: 0px; min-height: 385px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">EulerLine</span>(<span class="cm-variable">init</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span>=<span class="cm-number">1.0</span>, <span class="cm-variable">xsize</span>=<span class="cm-number">500</span>, <span class="cm-variable">ysize</span>=<span class="cm-number">500</span>, <span class="cm-variable">maxIterations</span>=<span class="cm-number">100</span>):</pre><pre>    <span class="cm-variable">line</span> = <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">init</span>[<span class="cm-number">0</span>], <span class="cm-variable">init</span>[<span class="cm-number">1</span>]])</pre><pre>    <span class="cm-variable">line</span>.<span class="cm-variable">shape</span> = (<span class="cm-number">2</span>,<span class="cm-number">1</span>)</pre><pre>    <span class="cm-variable">curr</span> = <span class="cm-variable">init</span>.<span class="cm-variable">copy</span>()</pre><pre>    <span class="cm-variable">x</span> = <span class="cm-variable">X</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>    <span class="cm-variable">y</span> = <span class="cm-variable">Y</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>    <span class="cm-variable">magnitude</span> = <span class="cm-variable">math</span>.<span class="cm-variable">sqrt</span>(<span class="cm-variable">x</span><span class="cm-operator">*</span><span class="cm-variable">x</span> <span class="cm-operator">+</span> <span class="cm-variable">y</span><span class="cm-operator">*</span><span class="cm-variable">y</span>)</pre><pre>    </pre><pre>    <span class="cm-variable">iteration</span> = <span class="cm-number">0</span></pre><pre>    <span class="cm-keyword">while</span> (<span class="cm-number">0</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">curr</span>[<span class="cm-number">0</span>] <span class="cm-operator">and</span> <span class="cm-variable">curr</span>[<span class="cm-number">0</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">xsize</span> <span class="cm-operator">and</span> <span class="cm-number">0</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">curr</span>[<span class="cm-number">1</span>] <span class="cm-operator">and</span> <span class="cm-variable">curr</span>[<span class="cm-number">1</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">ysize</span> <span class="cm-operator">and</span> <span class="cm-variable">iteration</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">maxIterations</span> <span class="cm-operator">and</span> <span class="cm-variable">magnitude</span> <span class="cm-operator">!=</span> <span class="cm-number">0</span>):</pre><pre>        <span class="cm-variable">scale</span> = <span class="cm-variable">h</span> <span class="cm-operator">/</span> <span class="cm-variable">magnitude</span></pre><pre>        <span class="cm-variable">dx</span> = <span class="cm-variable">x</span><span class="cm-operator">*</span><span class="cm-variable">scale</span></pre><pre>        <span class="cm-variable">dy</span> = <span class="cm-variable">y</span><span class="cm-operator">*</span><span class="cm-variable">scale</span></pre><pre>        <span class="cm-keyword">if</span> <span class="cm-builtin">abs</span>(<span class="cm-variable">h</span><span class="cm-operator">+</span><span class="cm-variable">h</span>) <span class="cm-operator">&lt;</span> <span class="cm-builtin">abs</span>(<span class="cm-variable">dx</span>) <span class="cm-operator">or</span> <span class="cm-builtin">abs</span>(<span class="cm-variable">h</span><span class="cm-operator">+</span><span class="cm-variable">h</span>) <span class="cm-operator">&lt;</span> <span class="cm-builtin">abs</span>(<span class="cm-variable">dy</span>):</pre><pre>            <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">line</span>, (<span class="cm-variable">line</span>.<span class="cm-variable">shape</span>[<span class="cm-number">0</span>] <span class="cm-operator">/</span> <span class="cm-number">2</span>, <span class="cm-number">2</span>))</pre><pre>        <span class="cm-variable">curr</span> = <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">curr</span>[<span class="cm-number">0</span>] <span class="cm-operator">+</span> <span class="cm-variable">dx</span>, <span class="cm-variable">curr</span>[<span class="cm-number">1</span>] <span class="cm-operator">+</span> <span class="cm-variable">dy</span>])</pre><pre>        </pre><pre>        <span class="cm-variable">line</span> = <span class="cm-variable">np</span>.<span class="cm-variable">vstack</span>((<span class="cm-variable">line</span>, <span class="cm-variable">curr</span>))</pre><pre>        <span class="cm-variable">iteration</span> += <span class="cm-number">1</span></pre><pre>        <span class="cm-variable">x</span> = <span class="cm-variable">X</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>        <span class="cm-variable">y</span> = <span class="cm-variable">Y</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>    <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">line</span>, (<span class="cm-variable">line</span>.<span class="cm-variable">shape</span>[<span class="cm-number">0</span>] <span class="cm-operator">/</span> <span class="cm-number">2</span>, <span class="cm-number">2</span>))</pre></div><div style="left: 64px; top: 272px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 385px;"></div><div style="display: none; height: 385px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[6]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 731px; margin-left: 0px; min-height: 249px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-variable">plt</span>.<span class="cm-variable">clf</span>()</pre><pre><span class="cm-variable">h</span> = <span class="cm-number">1.0</span></pre><pre>&nbsp;</pre><pre><span class="cm-variable">pointsExp</span> = <span class="cm-number">8</span> <span class="cm-comment"># Should be divisible by the dimensions (2)</span></pre><pre><span class="cm-keyword">for</span> <span class="cm-variable">k</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>,<span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">pointsExp</span>):</pre><pre>    <span class="cm-variable">pos</span> = <span class="cm-variable">width</span><span class="cm-operator">*</span><span class="cm-variable">i4_sobol</span>(<span class="cm-number">2</span>,<span class="cm-variable">k</span>)[<span class="cm-number">0</span>] <span class="cm-comment"># implicitly assumes square image [easy to fix if need be]</span></pre><pre>    <span class="cm-keyword">if</span> (<span class="cm-variable">mask</span>[<span class="cm-variable">np</span>.<span class="cm-variable">floor</span>(<span class="cm-variable">pos</span>[<span class="cm-number">0</span>]),<span class="cm-variable">np</span>.<span class="cm-variable">floor</span>(<span class="cm-variable">pos</span>[<span class="cm-number">1</span>])] <span class="cm-operator">==</span> <span class="cm-number">1.</span>):</pre><pre>        <span class="cm-variable">line1</span> = <span class="cm-variable">EulerLine</span>(<span class="cm-variable">pos</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span>, <span class="cm-variable">maxIterations</span>=<span class="cm-number">100</span>)</pre><pre>        <span class="cm-variable">line2</span> = <span class="cm-variable">EulerLine</span>(<span class="cm-variable">pos</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-operator">-</span><span class="cm-variable">h</span>, <span class="cm-variable">maxIterations</span>=<span class="cm-number">100</span>)</pre><pre>        <span class="cm-variable">plt</span>.<span class="cm-variable">plot</span>(<span class="cm-variable">line1</span>[:,<span class="cm-number">0</span>], <span class="cm-variable">line1</span>[:,<span class="cm-number">1</span>], <span class="cm-string">'w-'</span>, <span class="cm-variable">alpha</span> = <span class="cm-number">0.5</span>)</pre><pre>        <span class="cm-variable">plt</span>.<span class="cm-variable">plot</span>(<span class="cm-variable">line2</span>[:,<span class="cm-number">0</span>], <span class="cm-variable">line2</span>[:,<span class="cm-number">1</span>], <span class="cm-string">'w-'</span>, <span class="cm-variable">alpha</span> = <span class="cm-number">0.5</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-variable">im</span> = <span class="cm-variable">plt</span>.<span class="cm-variable">imshow</span>(<span class="cm-variable">s</span>, <span class="cm-variable">alpha</span> = <span class="cm-number">0.9</span>)</pre><pre><span class="cm-variable">plt</span>.<span class="cm-variable">show</span>()</pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 249px;"></div><div style="display: none; height: 249px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h1 id="Line-integral-convolution
">Line integral convolution<a href="#Line-integral-convolution%0A" class="anchor-link">¶</a></h1>
</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing unselected command_mode rendered"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h3 id="Function-declarations.
">Function declarations.<a href="#Function-declarations.%0A" class="anchor-link">¶</a></h3>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell rendered command_mode unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[7]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 56.6px; left: 373.6px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 643px; margin-left: 0px; min-height: 130px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">RK</span>(<span class="cm-variable">curr</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span>=<span class="cm-number">1.0</span>):</pre><pre>    <span class="cm-variable">curr</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">curr</span>, (<span class="cm-number">2</span>,)) <span class="cm-comment"># Because I'm tired of fighting with numpy... </span></pre><pre>    <span class="cm-variable">k1</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">EulerStep</span>(<span class="cm-variable">curr</span>,<span class="cm-variable">X</span>,<span class="cm-variable">Y</span>,<span class="cm-variable">h</span>), (<span class="cm-number">2</span>,)) <span class="cm-comment"># ...reshapes everywhere...</span></pre><pre>    <span class="cm-variable">k2</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">EulerStep</span>(<span class="cm-variable">np</span>.<span class="cm-variable">add</span>(<span class="cm-variable">curr</span>,<span class="cm-variable">k1</span>)<span class="cm-operator">*</span><span class="cm-number">0.5</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span><span class="cm-operator">*</span><span class="cm-number">0.5</span>), (<span class="cm-number">2</span>,))</pre><pre>    <span class="cm-variable">k3</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">EulerStep</span>(<span class="cm-variable">np</span>.<span class="cm-variable">add</span>(<span class="cm-variable">curr</span>,<span class="cm-variable">k2</span>)<span class="cm-operator">*</span><span class="cm-number">0.5</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span><span class="cm-operator">*</span><span class="cm-number">0.5</span>), (<span class="cm-number">2</span>,))</pre><pre>    <span class="cm-variable">k4</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">EulerStep</span>(<span class="cm-variable">k3</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span>), (<span class="cm-number">2</span>,))</pre><pre>    <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>((<span class="cm-variable">k1</span> <span class="cm-operator">+</span> <span class="cm-number">2</span><span class="cm-operator">*</span><span class="cm-variable">k2</span> <span class="cm-operator">+</span> <span class="cm-number">2</span><span class="cm-operator">*</span><span class="cm-variable">k3</span> <span class="cm-operator">+</span> <span class="cm-variable">k4</span>) <span class="cm-operator">/</span> <span class="cm-number">6</span>, (<span class="cm-number">2</span>,<span class="cm-number">1</span>)) <span class="cm-comment"># everywhere.</span></pre></div><div style="left: 368px; top: 51px; height: 17px; visibility: hidden;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none; visibility: hidden;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 130px;"></div><div style="display: none; height: 130px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[8]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.60004px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 667px; margin-left: 0px; min-height: 232px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">EulerStep</span>(<span class="cm-variable">curr</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-variable">h</span>=<span class="cm-number">1.0</span>):</pre><pre>    <span class="cm-keyword">if</span> (<span class="cm-operator">not</span> <span class="cm-variable">inBounds</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>], <span class="cm-variable">curr</span>[<span class="cm-number">1</span>])): <span class="cm-comment"># like propogating a NaN</span></pre><pre>        <span class="cm-keyword">return</span> <span class="cm-variable">curr</span>.<span class="cm-variable">copy</span>() <span class="cm-comment"># not in bounds --&gt; next point wont be in bounds either!</span></pre><pre>    <span class="cm-variable">x</span> = <span class="cm-variable">X</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>    <span class="cm-variable">y</span> = <span class="cm-variable">Y</span>(<span class="cm-variable">curr</span>[<span class="cm-number">0</span>],<span class="cm-variable">curr</span>[<span class="cm-number">1</span>])</pre><pre>    <span class="cm-variable">magnitude</span> = <span class="cm-variable">math</span>.<span class="cm-variable">sqrt</span>(<span class="cm-variable">x</span><span class="cm-operator">*</span><span class="cm-variable">x</span> <span class="cm-operator">+</span> <span class="cm-variable">y</span><span class="cm-operator">*</span><span class="cm-variable">y</span>)</pre><pre>&nbsp;</pre><pre>    <span class="cm-keyword">if</span> (<span class="cm-variable">magnitude</span> <span class="cm-operator">!=</span> <span class="cm-number">0</span>):</pre><pre>        <span class="cm-variable">scale</span> = <span class="cm-variable">h</span> <span class="cm-operator">/</span> <span class="cm-variable">magnitude</span></pre><pre>        <span class="cm-variable">dx</span> = <span class="cm-variable">x</span><span class="cm-operator">*</span><span class="cm-variable">scale</span></pre><pre>        <span class="cm-variable">dy</span> = <span class="cm-variable">y</span><span class="cm-operator">*</span><span class="cm-variable">scale</span></pre><pre>        <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">curr</span>[<span class="cm-number">0</span>] <span class="cm-operator">+</span> <span class="cm-variable">dx</span>, <span class="cm-variable">curr</span>[<span class="cm-number">1</span>] <span class="cm-operator">+</span> <span class="cm-variable">dy</span>]) <span class="cm-comment"># success!</span></pre><pre>    <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-operator">-</span><span class="cm-number">1.</span>,<span class="cm-operator">-</span><span class="cm-number">1.</span>]), (<span class="cm-number">2</span>,<span class="cm-number">1</span>)) <span class="cm-comment"># magnitude was 0 sadface</span></pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 232px;"></div><div style="display: none; height: 232px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[9]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 411px; margin-left: 0px; min-height: 45px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">inBounds</span>(<span class="cm-variable">x</span>, <span class="cm-variable">y</span>):</pre><pre>    <span class="cm-keyword">return</span> (<span class="cm-number">0</span><span class="cm-operator">&lt;=</span><span class="cm-variable">x</span> <span class="cm-operator">and</span> <span class="cm-variable">x</span><span class="cm-operator">&lt;</span><span class="cm-variable">width</span> <span class="cm-operator">and</span> <span class="cm-number">0</span><span class="cm-operator">&lt;=</span><span class="cm-variable">y</span> <span class="cm-operator">and</span> <span class="cm-variable">y</span><span class="cm-operator">&lt;</span><span class="cm-variable">height</span>)</pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 45px;"></div><div style="display: none; height: 45px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[10]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 531px; margin-left: 0px; min-height: 283px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">streamline</span>(<span class="cm-variable">p</span>):</pre><pre>    <span class="cm-variable">useRK</span> = <span class="cm-builtin">False</span></pre><pre>    <span class="cm-variable">path</span> = <span class="cm-variable">np</span>.<span class="cm-variable">reshape</span>(<span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">p</span>[<span class="cm-number">0</span>],<span class="cm-variable">p</span>[<span class="cm-number">1</span>]]), (<span class="cm-number">2</span>,<span class="cm-number">1</span>))</pre><pre>    <span class="cm-variable">f</span> = <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">p</span>[<span class="cm-number">0</span>],<span class="cm-variable">p</span>[<span class="cm-number">1</span>]]) <span class="cm-comment"># position along forward direction</span></pre><pre>    <span class="cm-variable">r</span> = <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">p</span>[<span class="cm-number">0</span>],<span class="cm-variable">p</span>[<span class="cm-number">1</span>]]) <span class="cm-comment"># position along reverse direction</span></pre><pre>    </pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">L</span><span class="cm-operator">+</span><span class="cm-variable">M</span>): </pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-variable">useRK</span>):</pre><pre>            <span class="cm-variable">f</span> = <span class="cm-variable">RK</span>(<span class="cm-variable">f</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>,  <span class="cm-variable">h</span>) </pre><pre>            <span class="cm-variable">r</span> = <span class="cm-variable">RK</span>(<span class="cm-variable">r</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-operator">-</span><span class="cm-variable">h</span>)     </pre><pre>        <span class="cm-keyword">else</span>:</pre><pre>            <span class="cm-variable">f</span> = <span class="cm-variable">EulerStep</span>(<span class="cm-variable">f</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>,  <span class="cm-variable">h</span>) </pre><pre>            <span class="cm-variable">r</span> = <span class="cm-variable">EulerStep</span>(<span class="cm-variable">r</span>, <span class="cm-variable">X</span>, <span class="cm-variable">Y</span>, <span class="cm-operator">-</span><span class="cm-variable">h</span>) </pre><pre>        <span class="cm-variable">path</span> = <span class="cm-variable">np</span>.<span class="cm-variable">hstack</span>((<span class="cm-variable">r</span>, <span class="cm-variable">path</span>, <span class="cm-variable">f</span>))</pre><pre>&nbsp;</pre><pre>    <span class="cm-keyword">return</span> <span class="cm-variable">np</span>.<span class="cm-variable">floor</span>(<span class="cm-variable">path</span>) <span class="cm-comment"># return actual pixel indices (integers)</span></pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 283px;"></div><div style="display: none; height: 283px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[11]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 955px; margin-left: 0px; min-height: 997px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">integrate</span>(<span class="cm-variable">line</span>):    </pre><pre>    <span class="cm-variable">l</span> = <span class="cm-variable">line</span>.<span class="cm-variable">shape</span>[<span class="cm-number">1</span>] </pre><pre>    <span class="cm-variable">mid</span> = (<span class="cm-variable">l</span> <span class="cm-operator">//</span> <span class="cm-number">2</span>) <span class="cm-operator">+</span> <span class="cm-variable">offset</span> <span class="cm-comment"># offset should be 0</span></pre><pre>    <span class="cm-variable">x0</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">mid</span>]</pre><pre>    <span class="cm-variable">y0</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">mid</span>]</pre><pre>    <span class="cm-variable">k</span> = <span class="cm-number">1</span> <span class="cm-comment"># number of hits </span></pre><pre>    </pre><pre>    <span class="cm-comment"># integral at streamline center</span></pre><pre>    <span class="cm-variable">integral0</span> = <span class="cm-number">0.0</span></pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-operator">-</span><span class="cm-variable">L</span>, <span class="cm-variable">L</span><span class="cm-operator">+</span><span class="cm-number">1</span>): <span class="cm-comment"># might actually need a n+1 on the end to hit the whole path</span></pre><pre>        <span class="cm-variable">x</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">mid</span> <span class="cm-operator">+</span> <span class="cm-variable">i</span>]</pre><pre>        <span class="cm-variable">y</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">mid</span> <span class="cm-operator">+</span> <span class="cm-variable">i</span>]</pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-variable">inBounds</span>(<span class="cm-variable">x</span>,<span class="cm-variable">y</span>)):</pre><pre>            <span class="cm-variable">k</span> += <span class="cm-number">1</span></pre><pre>            <span class="cm-variable">integral0</span> += <span class="cm-variable">noise</span>[<span class="cm-variable">x</span>,<span class="cm-variable">y</span>] <span class="cm-comment"># x,y guaranteed to be integers by return statement of streamline()</span></pre><pre>    <span class="cm-variable">integral0</span> /= <span class="cm-variable">k</span> <span class="cm-comment"># normalize by number of hits you actually got [shouldnt this be exactly 0.5 in the infinite limit?]</span></pre><pre>            </pre><pre>    <span class="cm-variable">integral</span>[<span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">mid</span>], <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">mid</span>]] += <span class="cm-variable">integral0</span></pre><pre>    <span class="cm-variable">numHits</span> [<span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">mid</span>], <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">mid</span>]] += <span class="cm-number">1</span></pre><pre>    </pre><pre>    <span class="cm-variable">fwdIntegral</span> = <span class="cm-variable">integral0</span> <span class="cm-comment"># simple boxcar convolution</span></pre><pre>    <span class="cm-variable">revIntegral</span> = <span class="cm-variable">integral0</span></pre><pre>    </pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">1</span>, <span class="cm-variable">M</span>):</pre><pre>        <span class="cm-variable">centerIndex</span> = <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-variable">mid</span></pre><pre>        <span class="cm-variable">leadingEdgeIndex</span> = <span class="cm-variable">centerIndex</span> <span class="cm-operator">+</span> (<span class="cm-variable">L</span><span class="cm-operator">+</span><span class="cm-number">1</span>)</pre><pre>        <span class="cm-variable">trailingEdgeIndex</span> = <span class="cm-variable">centerIndex</span> <span class="cm-operator">-</span> <span class="cm-variable">L</span></pre><pre>        </pre><pre>        <span class="cm-variable">centerX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">centerIndex</span>]</pre><pre>        <span class="cm-variable">centerY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">centerIndex</span>]</pre><pre>        <span class="cm-variable">leadingEdgeX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">leadingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">leadingEdgeY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">leadingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">trailingEdgeX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">trailingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">trailingEdgeY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">trailingEdgeIndex</span>]</pre><pre>        </pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-number">0</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">trailingEdgeIndex</span> <span class="cm-operator">and</span> <span class="cm-variable">leadingEdgeIndex</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">line</span>.<span class="cm-variable">shape</span>[<span class="cm-number">1</span>]):</pre><pre>            <span class="cm-keyword">if</span> (<span class="cm-variable">inBounds</span>(<span class="cm-variable">leadingEdgeX</span>, <span class="cm-variable">leadingEdgeY</span>) <span class="cm-operator">and</span> <span class="cm-variable">inBounds</span>(<span class="cm-variable">trailingEdgeX</span>, <span class="cm-variable">trailingEdgeY</span>)):</pre><pre>                <span class="cm-variable">fwdIntegral</span> += (<span class="cm-variable">noise</span>[<span class="cm-variable">leadingEdgeX</span>, <span class="cm-variable">leadingEdgeY</span>] <span class="cm-operator">-</span> <span class="cm-variable">noise</span>[<span class="cm-variable">trailingEdgeX</span>, <span class="cm-variable">trailingEdgeY</span>]) <span class="cm-operator">/</span> <span class="cm-variable">k</span></pre><pre>                <span class="cm-variable">integral</span>[<span class="cm-variable">centerX</span>, <span class="cm-variable">centerY</span>] += <span class="cm-variable">fwdIntegral</span></pre><pre>                <span class="cm-variable">numHits</span>[<span class="cm-variable">centerX</span>, <span class="cm-variable">centerY</span>] += <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre>        <span class="cm-comment"># now do the reverse</span></pre><pre>        <span class="cm-variable">centerIndex</span> = <span class="cm-operator">-</span><span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-variable">mid</span></pre><pre>        <span class="cm-variable">leadingEdgeIndex</span> = <span class="cm-variable">centerIndex</span> <span class="cm-operator">-</span> (<span class="cm-variable">L</span><span class="cm-operator">+</span><span class="cm-number">1</span>)</pre><pre>        <span class="cm-variable">trailingEdgeIndex</span> = <span class="cm-variable">centerIndex</span> <span class="cm-operator">+</span> <span class="cm-variable">L</span></pre><pre>        </pre><pre>        <span class="cm-variable">centerX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">centerIndex</span>]</pre><pre>        <span class="cm-variable">centerY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">centerIndex</span>]</pre><pre>        <span class="cm-variable">leadingEdgeX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">leadingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">leadingEdgeY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">leadingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">trailingEdgeX</span> = <span class="cm-variable">line</span>[<span class="cm-number">0</span>][<span class="cm-variable">trailingEdgeIndex</span>]</pre><pre>        <span class="cm-variable">trailingEdgeY</span> = <span class="cm-variable">line</span>[<span class="cm-number">1</span>][<span class="cm-variable">trailingEdgeIndex</span>]</pre><pre>        </pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-number">0</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">trailingEdgeIndex</span> <span class="cm-operator">and</span> <span class="cm-variable">leadingEdgeIndex</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">line</span>.<span class="cm-variable">shape</span>[<span class="cm-number">1</span>]):</pre><pre>            <span class="cm-keyword">if</span> (<span class="cm-variable">inBounds</span>(<span class="cm-variable">trailingEdgeX</span>,<span class="cm-variable">trailingEdgeY</span>) <span class="cm-operator">and</span> <span class="cm-variable">inBounds</span>(<span class="cm-variable">leadingEdgeX</span>,<span class="cm-variable">leadingEdgeY</span>)):</pre><pre>                <span class="cm-variable">revIntegral</span> += (<span class="cm-variable">noise</span>[<span class="cm-variable">leadingEdgeX</span>, <span class="cm-variable">leadingEdgeY</span>] <span class="cm-operator">-</span> <span class="cm-variable">noise</span>[<span class="cm-variable">trailingEdgeX</span>, <span class="cm-variable">trailingEdgeY</span>]) <span class="cm-operator">/</span> <span class="cm-variable">k</span></pre><pre>                <span class="cm-variable">integral</span>[<span class="cm-variable">centerX</span>, <span class="cm-variable">centerY</span>] += <span class="cm-variable">revIntegral</span></pre><pre>                <span class="cm-variable">numHits</span>[<span class="cm-variable">centerX</span>, <span class="cm-variable">centerY</span>] += <span class="cm-number">1</span></pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 997px;"></div><div style="display: none; height: 997px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[12]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 507px; margin-left: 0px; min-height: 113px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-keyword">def</span> <span class="cm-def">insufficientHits</span>(<span class="cm-variable">numHits</span>, <span class="cm-variable">mask</span>, <span class="cm-variable">minNumHits</span>):</pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>,<span class="cm-variable">width</span>):</pre><pre>        <span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>,<span class="cm-variable">height</span>):</pre><pre>            <span class="cm-keyword">if</span> (<span class="cm-variable">mask</span>[<span class="cm-variable">j</span>,<span class="cm-variable">i</span>] <span class="cm-operator">==</span> <span class="cm-number">1.</span> <span class="cm-operator">and</span> <span class="cm-variable">numHits</span>[<span class="cm-variable">i</span>,<span class="cm-variable">j</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">minNumHits</span>):</pre><pre>                <span class="cm-keyword">return</span> <span class="cm-builtin">True</span></pre><pre>    <span class="cm-keyword">return</span> <span class="cm-builtin">False</span></pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 113px;"></div><div style="display: none; height: 113px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h3 id="Computing-texture-field.
">Computing texture field.<a href="#Computing-texture-field.%0A" class="anchor-link">¶</a></h3>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell rendered command_mode unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[13]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 45.6px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off">1</textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 907px; margin-left: 0px; min-height: 844px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre><span class="cm-variable">h</span> = <span class="cm-number">1</span></pre><pre><span class="cm-variable">L</span> = <span class="cm-number">3</span> <span class="cm-comment"># kernel width</span></pre><pre><span class="cm-variable">M</span> = <span class="cm-number">10</span> <span class="cm-comment"># this is the "useful width" of the pathline approximating the streamline</span></pre><pre><span class="cm-variable">minNumHits</span> = <span class="cm-number">1</span></pre><pre><span class="cm-variable">offset</span> = <span class="cm-number">0</span></pre><pre><span class="cm-variable">integral</span> = <span class="cm-variable">np</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">width</span>, <span class="cm-variable">height</span>))</pre><pre><span class="cm-variable">numHits</span> = <span class="cm-variable">np</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">width</span>, <span class="cm-variable">height</span>))</pre><pre><span class="cm-variable">np</span>.<span class="cm-variable">random</span>.<span class="cm-variable">seed</span>(<span class="cm-number">0</span>)</pre><pre><span class="cm-variable">noise</span> = <span class="cm-variable">np</span>.<span class="cm-variable">random</span>.<span class="cm-variable">rand</span>(<span class="cm-variable">width</span>, <span class="cm-variable">height</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-variable">halfWidth</span> = <span class="cm-variable">width</span> <span class="cm-operator">/</span> <span class="cm-number">2</span></pre><pre><span class="cm-variable">halfHeight</span> = <span class="cm-variable">height</span> <span class="cm-operator">/</span> <span class="cm-number">2</span></pre><pre>&nbsp;</pre><pre><span class="cm-variable">exponent</span> = <span class="cm-number">8</span> <span class="cm-comment"># Should be divisible by number of dimensions </span></pre><pre><span class="cm-variable">iterations</span> = <span class="cm-number">16</span></pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Each low-discrepency pass has"</span>,<span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">exponent</span>,<span class="cm-string">"streamlines."</span></pre><pre><span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>, <span class="cm-variable">iterations</span>):</pre><pre>    <span class="cm-keyword">print</span> <span class="cm-variable">j</span>,<span class="cm-string">"of"</span>,<span class="cm-variable">iterations</span>,<span class="cm-string">"initial, low-discrepency passes completed."</span></pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>, <span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">exponent</span>):</pre><pre>        <span class="cm-variable">pos</span> = <span class="cm-variable">width</span><span class="cm-operator">*</span><span class="cm-variable">i4_sobol</span>(<span class="cm-number">2</span>,<span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-variable">j</span><span class="cm-operator">*</span>(<span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">exponent</span>))[<span class="cm-number">0</span>] <span class="cm-comment"># implicitly assumes square image [easy to fix if need be]</span></pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-variable">mask</span>[<span class="cm-variable">pos</span>[<span class="cm-number">1</span>],<span class="cm-variable">pos</span>[<span class="cm-number">0</span>]] <span class="cm-operator">==</span> <span class="cm-number">1.</span> <span class="cm-operator">and</span> <span class="cm-variable">numHits</span>[<span class="cm-variable">np</span>.<span class="cm-variable">floor</span>(<span class="cm-variable">pos</span>[<span class="cm-number">0</span>]), <span class="cm-variable">np</span>.<span class="cm-variable">floor</span>(<span class="cm-variable">pos</span>[<span class="cm-number">1</span>])] <span class="cm-operator">&lt;</span> <span class="cm-variable">minNumHits</span>):</pre><pre>            <span class="cm-variable">line</span> = <span class="cm-variable">streamline</span>( <span class="cm-variable">pos</span> )</pre><pre>            <span class="cm-variable">integrate</span>(<span class="cm-variable">line</span>)</pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Total number of low-discrepency streamlines:"</span>, <span class="cm-variable">iterations</span><span class="cm-operator">*</span>(<span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">exponent</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-keyword">while</span> <span class="cm-variable">insufficientHits</span>(<span class="cm-variable">numHits</span>, <span class="cm-variable">mask</span>, <span class="cm-variable">minNumHits</span>): <span class="cm-comment">#(np.amin(np.multiply(numHits), invMask) &lt; minNumHits):</span></pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">"Starting a complete-image pass."</span></pre><pre>    <span class="cm-variable">perturbationX</span> = <span class="cm-variable">np</span>.<span class="cm-variable">random</span>.<span class="cm-variable">random_sample</span>()</pre><pre>    <span class="cm-variable">perturbationY</span> = <span class="cm-variable">np</span>.<span class="cm-variable">random</span>.<span class="cm-variable">random_sample</span>()</pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>,<span class="cm-variable">width</span>):</pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-variable">i</span><span class="cm-operator">%</span>(<span class="cm-variable">width</span><span class="cm-operator">//</span><span class="cm-number">20</span>)<span class="cm-operator">==</span>(<span class="cm-variable">width</span><span class="cm-operator">//</span><span class="cm-number">20</span> <span class="cm-operator">-</span><span class="cm-number">1</span>)): <span class="cm-comment"># updates given every 5% completed</span></pre><pre>            <span class="cm-keyword">print</span> <span class="cm-variable">i</span>,<span class="cm-string">"of"</span>,<span class="cm-variable">width</span>,<span class="cm-string">"rows completed."</span></pre><pre>        <span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>,<span class="cm-variable">height</span>):</pre><pre>            <span class="cm-keyword">if</span> (<span class="cm-variable">mask</span>[<span class="cm-variable">j</span>,<span class="cm-variable">i</span>] <span class="cm-operator">==</span> <span class="cm-number">1.</span> <span class="cm-operator">and</span> <span class="cm-variable">numHits</span>[<span class="cm-variable">i</span>,<span class="cm-variable">j</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">minNumHits</span>  ):</pre><pre>                <span class="cm-variable">integrate</span>( <span class="cm-variable">streamline</span>( <span class="cm-variable">np</span>.<span class="cm-variable">array</span>([<span class="cm-variable">i</span><span class="cm-operator">+</span><span class="cm-variable">perturbationX</span>, <span class="cm-variable">j</span><span class="cm-operator">+</span><span class="cm-variable">perturbationY</span>]) ) )</pre><pre>&nbsp;</pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Normalizing..."</span></pre><pre><span class="cm-variable">noHits</span> = <span class="cm-variable">np</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">width</span>,<span class="cm-variable">height</span>))</pre><pre><span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>, <span class="cm-variable">width</span>):</pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">0</span>, <span class="cm-variable">height</span>):</pre><pre>        <span class="cm-variable">k</span> = <span class="cm-variable">numHits</span>[<span class="cm-variable">i</span>,<span class="cm-variable">j</span>]</pre><pre>        <span class="cm-keyword">if</span> (<span class="cm-variable">k</span><span class="cm-operator">==</span><span class="cm-number">0</span>):</pre><pre>            <span class="cm-variable">k</span> += <span class="cm-number">1</span></pre><pre>            <span class="cm-variable">numHits</span>[<span class="cm-variable">i</span>,<span class="cm-variable">j</span>] += <span class="cm-number">1</span></pre><pre>        <span class="cm-variable">integral</span>[<span class="cm-variable">i</span>,<span class="cm-variable">j</span>] /= <span class="cm-variable">k</span> </pre><pre><span class="cm-keyword">print</span></pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Done."</span></pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Max integral"</span>,<span class="cm-variable">np</span>.<span class="cm-variable">amax</span>(<span class="cm-variable">integral</span>)</pre><pre><span class="cm-keyword">print</span> <span class="cm-string">"Max hits"</span>, <span class="cm-variable">np</span>.<span class="cm-variable">amax</span>(<span class="cm-variable">numHits</span>)</pre></div><div style="left: 40px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 844px;"></div><div style="display: none; height: 844px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"><div class="output_area"><div class="prompt"></div><div class="output_subarea output_text output_stream output_stdout"><pre>Each low-discrepency pass has 256 streamlines.
0 of 16 initial, low-discrepency passes completed.
1 of 16 initial, low-discrepency passes completed.
2 of 16 initial, low-discrepency passes completed.
3 of 16 initial, low-discrepency passes completed.
4 of 16 initial, low-discrepency passes completed.
5 of 16 initial, low-discrepency passes completed.
6 of 16 initial, low-discrepency passes completed.
7 of 16 initial, low-discrepency passes completed.
8 of 16 initial, low-discrepency passes completed.
9 of 16 initial, low-discrepency passes completed.
10 of 16 initial, low-discrepency passes completed.
11 of 16 initial, low-discrepency passes completed.
12 of 16 initial, low-discrepency passes completed.
13 of 16 initial, low-discrepency passes completed.
14 of 16 initial, low-discrepency passes completed.
15 of 16 initial, low-discrepency passes completed.
Total number of low-discrepency streamlines: 4096
Starting a complete-image pass.
24 of 500 rows completed.
49 of 500 rows completed.
74 of 500 rows completed.
99 of 500 rows completed.
124 of 500 rows completed.
149 of 500 rows completed.
174 of 500 rows completed.
199 of 500 rows completed.
224 of 500 rows completed.
249 of 500 rows completed.
274 of 500 rows completed.
299 of 500 rows completed.
324 of 500 rows completed.
349 of 500 rows completed.
374 of 500 rows completed.
399 of 500 rows completed.
424 of 500 rows completed.
449 of 500 rows completed.
474 of 500 rows completed.
499 of 500 rows completed.
Normalizing...

Done.
Max integral 0.790239882305
Max hits 14.0
</pre></div></div></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h3 id="Plotting.
">Plotting.<a href="#Plotting.%0A" class="anchor-link">¶</a></h3>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell rendered selected command_mode"><div class="input"><div class="prompt input_prompt">In&nbsp;[15]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 39.6px; left: 1075px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off">.</textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 1075px; margin-left: 0px; min-height: 113px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"><div style="position: absolute; left: 976px; top: 34px; width: 120px; height: 17px;" class="CodeMirror-selected"></div></div><div style="" class="CodeMirror-code"><pre><span class="cm-variable">plt</span>.<span class="cm-variable">clf</span>()</pre><pre><span class="cm-variable">normalizedIntegral</span> = <span class="cm-variable">np</span>.<span class="cm-variable">transpose</span>(<span class="cm-variable">integral</span>) <span class="cm-operator">/</span> <span class="cm-variable">np</span>.<span class="cm-variable">amax</span>(<span class="cm-variable">integral</span>)</pre><pre><span class="cm-variable">shiftedIntegral</span> = <span class="cm-variable">np</span>.<span class="cm-variable">add</span>(<span class="cm-variable">normalizedIntegral</span>, <span class="cm-operator">+</span><span class="cm-number">2.0</span>) <span class="cm-comment"># lower values emphasize the texturing more. values in [0..2] seem good (at least).</span></pre><pre><span class="cm-variable">plt</span>.<span class="cm-variable">imshow</span>(<span class="cm-variable">np</span>.<span class="cm-variable">multiply</span>(<span class="cm-variable">shiftedIntegral</span>, <span class="cm-variable">s</span>), <span class="cm-variable">cmap</span> = <span class="cm-variable">plt</span>.<span class="cm-variable">cm</span>.<span class="cm-variable">spectral</span>)</pre><pre><span class="cm-comment">#plt.imshow(np.multiply(shiftedIntegral, 1.), cmap = plt.cm.spectral)</span></pre><pre><span class="cm-variable">plt</span>.<span class="cm-variable">show</span>()</pre></div><div style="left: 1072px; top: 34px; height: 17px; visibility: hidden;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none; visibility: hidden;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 113px;"></div><div style="display: none; height: 113px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing command_mode rendered unselected"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><h1 id="Library-code.
">Library code.<a href="#Library-code.%0A" class="anchor-link">¶</a></h1>
</div></div></div><div tabindex="2" class="cell text_cell border-box-sizing unselected command_mode rendered"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div style="display: none;" class="input_area"><div class="CodeMirror cm-s-default CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div class="CodeMirror-sizer"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"><pre><span>x</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div style="display: none;" class="CodeMirror-gutters"></div></div></div></div><div tabindex="-1" class="text_cell_render border-box-sizing rendered_html"><p>Below is an implementation of Sobolev sequences. I did not make it. You can consider this the effective end of the document.</p>
</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell rendered command_mode unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[4]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 7978.6px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 875px; margin-left: 0px; min-height: 8477px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre>&nbsp;</pre><pre><span class="cm-string">"""</span></pre><pre><span class="cm-string">  Licensing:</span></pre><pre><span class="cm-string">    This code is distributed under the GNU LGPL license.</span></pre><pre><span class="cm-string"> </span></pre><pre><span class="cm-string">  Authors:</span></pre><pre><span class="cm-string">    Original FORTRAN77 version of i4_sobol by Bennett Fox.</span></pre><pre><span class="cm-string">    MATLAB version by John Burkardt.</span></pre><pre><span class="cm-string">    PYTHON version by Corrado Chisari</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Original Python version of is_prime by Corrado Chisari</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Original MATLAB versions of other functions by John Burkardt.</span></pre><pre><span class="cm-string">    PYTHON versions by Corrado Chisari</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Original code is available from http://people.sc.fsu.edu/~jburkardt/py_src/sobol/sobol.html</span></pre><pre><span class="cm-string">"""</span></pre><pre>&nbsp;</pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">math</span></pre><pre><span class="cm-keyword">import</span> <span class="cm-variable">numpy</span></pre><pre>&nbsp;</pre><pre><span class="cm-variable">__all__</span> = [<span class="cm-string">'i4_bit_hi1'</span>, <span class="cm-string">'i4_bit_lo0'</span>, <span class="cm-string">'i4_sobol_generate'</span>, <span class="cm-string">'i4_sobol'</span>, <span class="cm-string">'i4_uniform'</span>, <span class="cm-string">'prime_ge'</span>, <span class="cm-string">'is_prime'</span>]</pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">i4_bit_hi1</span> ( <span class="cm-variable">n</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  i4_bit_hi1 returns the position of the high 1 bit base 2 in an integer.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Example:</span></pre><pre><span class="cm-string">    +------+-------------+-----</span></pre><pre><span class="cm-string">    |    N |      Binary | BIT</span></pre><pre><span class="cm-string">    +------|-------------+-----</span></pre><pre><span class="cm-string">    |    0 |           0 |   0</span></pre><pre><span class="cm-string">    |    1 |           1 |   1</span></pre><pre><span class="cm-string">    |    2 |          10 |   2</span></pre><pre><span class="cm-string">    |    3 |          11 |   2</span></pre><pre><span class="cm-string">    |    4 |         100 |   3</span></pre><pre><span class="cm-string">    |    5 |         101 |   3</span></pre><pre><span class="cm-string">    |    6 |         110 |   3</span></pre><pre><span class="cm-string">    |    7 |         111 |   3</span></pre><pre><span class="cm-string">    |    8 |        1000 |   4</span></pre><pre><span class="cm-string">    |    9 |        1001 |   4</span></pre><pre><span class="cm-string">    |   10 |        1010 |   4</span></pre><pre><span class="cm-string">    |   11 |        1011 |   4</span></pre><pre><span class="cm-string">    |   12 |        1100 |   4</span></pre><pre><span class="cm-string">    |   13 |        1101 |   4</span></pre><pre><span class="cm-string">    |   14 |        1110 |   4</span></pre><pre><span class="cm-string">    |   15 |        1111 |   4</span></pre><pre><span class="cm-string">    |   16 |       10000 |   5</span></pre><pre><span class="cm-string">    |   17 |       10001 |   5</span></pre><pre><span class="cm-string">    | 1023 |  1111111111 |  10</span></pre><pre><span class="cm-string">    | 1024 | 10000000000 |  11</span></pre><pre><span class="cm-string">    | 1025 | 10000000001 |  11</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer N, the integer to be measured.</span></pre><pre><span class="cm-string">    N should be nonnegative.  If N is nonpositive, the value will always be 0.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, integer BIT, the number of bits base 2.</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">i</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">n</span> )</pre><pre><span class="cm-error">  </span><span class="cm-variable">bit</span> = <span class="cm-number">0</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">while</span> ( <span class="cm-number">1</span> ):</pre><pre>    <span class="cm-keyword">if</span> ( <span class="cm-variable">i</span> <span class="cm-operator">&lt;=</span> <span class="cm-number">0</span> ):</pre><pre><span class="cm-error">      </span><span class="cm-keyword">break</span></pre><pre>    <span class="cm-variable">bit</span> += <span class="cm-number">1</span></pre><pre>    <span class="cm-variable">i</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">i</span> <span class="cm-operator">/</span> <span class="cm-number">2.</span> )</pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> <span class="cm-variable">bit</span></pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">i4_bit_lo0</span> ( <span class="cm-variable">n</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  I4_BIT_LO0 returns the position of the low 0 bit base 2 in an integer.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Example:</span></pre><pre><span class="cm-string">    +------+------------+----</span></pre><pre><span class="cm-string">    |    N |     Binary | BIT</span></pre><pre><span class="cm-string">    +------+------------+----</span></pre><pre><span class="cm-string">    |    0 |          0 |   1</span></pre><pre><span class="cm-string">    |    1 |          1 |   2</span></pre><pre><span class="cm-string">    |    2 |         10 |   1</span></pre><pre><span class="cm-string">    |    3 |         11 |   3</span></pre><pre><span class="cm-string">    |    4 |        100 |   1</span></pre><pre><span class="cm-string">    |    5 |        101 |   2</span></pre><pre><span class="cm-string">    |    6 |        110 |   1</span></pre><pre><span class="cm-string">    |    7 |        111 |   4</span></pre><pre><span class="cm-string">    |    8 |       1000 |   1</span></pre><pre><span class="cm-string">    |    9 |       1001 |   2</span></pre><pre><span class="cm-string">    |   10 |       1010 |   1</span></pre><pre><span class="cm-string">    |   11 |       1011 |   3</span></pre><pre><span class="cm-string">    |   12 |       1100 |   1</span></pre><pre><span class="cm-string">    |   13 |       1101 |   2</span></pre><pre><span class="cm-string">    |   14 |       1110 |   1</span></pre><pre><span class="cm-string">    |   15 |       1111 |   5</span></pre><pre><span class="cm-string">    |   16 |      10000 |   1</span></pre><pre><span class="cm-string">    |   17 |      10001 |   2</span></pre><pre><span class="cm-string">    | 1023 | 1111111111 |   1</span></pre><pre><span class="cm-string">    | 1024 | 0000000000 |   1</span></pre><pre><span class="cm-string">    | 1025 | 0000000001 |   1</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer N, the integer to be measured.</span></pre><pre><span class="cm-string">    N should be nonnegative.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, integer BIT, the position of the low 1 bit.</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">bit</span> = <span class="cm-number">0</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">i</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">n</span> )</pre><pre><span class="cm-error">  </span><span class="cm-keyword">while</span> ( <span class="cm-number">1</span> ):</pre><pre>    <span class="cm-variable">bit</span> = <span class="cm-variable">bit</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></pre><pre>    <span class="cm-variable">i2</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">i</span> <span class="cm-operator">/</span> <span class="cm-number">2.</span> )</pre><pre>    <span class="cm-keyword">if</span> ( <span class="cm-variable">i</span> <span class="cm-operator">==</span> <span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">i2</span> ):</pre><pre><span class="cm-error">      </span><span class="cm-keyword">break</span></pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">i</span> = <span class="cm-variable">i2</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> <span class="cm-variable">bit</span></pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">i4_sobol_generate</span> ( <span class="cm-variable">m</span>, <span class="cm-variable">n</span>, <span class="cm-variable">skip</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  i4_sobol_generate generates a Sobol dataset.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer M, the spatial dimension.</span></pre><pre><span class="cm-string">    Input, integer N, the number of points to generate.</span></pre><pre><span class="cm-string">    Input, integer SKIP, the number of initial points to skip.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, real R(M,N), the points.</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">r</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">m</span>,<span class="cm-variable">n</span>))</pre><pre><span class="cm-error">  </span><span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span> (<span class="cm-number">1</span>, <span class="cm-variable">n</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre>    <span class="cm-variable">seed</span> = <span class="cm-variable">skip</span> <span class="cm-operator">+</span> <span class="cm-variable">j</span> <span class="cm-operator">-</span> <span class="cm-number">2</span></pre><pre>    [ <span class="cm-variable">r</span>[<span class="cm-number">0</span>:<span class="cm-variable">m</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-number">1</span>], <span class="cm-variable">seed</span> ] = <span class="cm-variable">i4_sobol</span> ( <span class="cm-variable">m</span>, <span class="cm-variable">seed</span> )</pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> <span class="cm-variable">r</span></pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">i4_sobol</span> ( <span class="cm-variable">dim_num</span>, <span class="cm-variable">seed</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  i4_sobol generates a new quasirandom Sobol vector with each call.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Discussion:</span></pre><pre><span class="cm-string">    The routine adapts the ideas of Antonov and Saleev.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Reference:</span></pre><pre><span class="cm-string">    Antonov, Saleev,</span></pre><pre><span class="cm-string">    USSR Computational Mathematics and Mathematical Physics,</span></pre><pre><span class="cm-string">    Volume 19, 1980, pages 252 - 256.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Paul Bratley, Bennett Fox,</span></pre><pre><span class="cm-string">    Algorithm 659:</span></pre><pre><span class="cm-string">    Implementing Sobol's Quasirandom Sequence Generator,</span></pre><pre><span class="cm-string">    ACM Transactions on Mathematical Software,</span></pre><pre><span class="cm-string">    Volume 14, Number 1, pages 88-100, 1988.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Bennett Fox,</span></pre><pre><span class="cm-string">    Algorithm 647:</span></pre><pre><span class="cm-string">    Implementation and Relative Efficiency of Quasirandom</span></pre><pre><span class="cm-string">    Sequence Generators,</span></pre><pre><span class="cm-string">    ACM Transactions on Mathematical Software,</span></pre><pre><span class="cm-string">    Volume 12, Number 4, pages 362-376, 1986.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Ilya Sobol,</span></pre><pre><span class="cm-string">    USSR Computational Mathematics and Mathematical Physics,</span></pre><pre><span class="cm-string">    Volume 16, pages 236-242, 1977.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Ilya Sobol, Levitan,</span></pre><pre><span class="cm-string">    The Production of Points Uniformly Distributed in a Multidimensional</span></pre><pre><span class="cm-string">    Cube (in Russian),</span></pre><pre><span class="cm-string">    Preprint IPM Akad. Nauk SSSR,</span></pre><pre><span class="cm-string">    Number 40, Moscow 1976.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer DIM_NUM, the number of spatial dimensions.</span></pre><pre><span class="cm-string">    DIM_NUM must satisfy 1 &lt;= DIM_NUM &lt;= 40.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Input/output, integer SEED, the "seed" for the sequence.</span></pre><pre><span class="cm-string">    This is essentially the index in the sequence of the quasirandom</span></pre><pre><span class="cm-string">    value to be generated.  On output, SEED has been set to the</span></pre><pre><span class="cm-string">    appropriate next value, usually simply SEED+1.</span></pre><pre><span class="cm-string">    If SEED is less than 0 on input, it is treated as though it were 0.</span></pre><pre><span class="cm-string">    An input value of 0 requests the first (0-th) element of the sequence.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, real QUASI(DIM_NUM), the next quasirandom vector.</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">atmost</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">dim_max</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">dim_num_save</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">initialized</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">lastq</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">log_max</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">maxcol</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">poly</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">recipd</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">seed_save</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">global</span> <span class="cm-variable">v</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-operator">not</span> <span class="cm-string">'initialized'</span> <span class="cm-operator">in</span> <span class="cm-builtin">globals</span>().<span class="cm-variable">keys</span>() ):</pre><pre>    <span class="cm-variable">initialized</span> = <span class="cm-number">0</span></pre><pre>    <span class="cm-variable">dim_num_save</span> = <span class="cm-operator">-</span><span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-operator">not</span> <span class="cm-variable">initialized</span> <span class="cm-operator">or</span> <span class="cm-variable">dim_num</span> <span class="cm-operator">!=</span> <span class="cm-variable">dim_num_save</span> ):</pre><pre>    <span class="cm-variable">initialized</span> = <span class="cm-number">1</span></pre><pre>    <span class="cm-variable">dim_max</span> = <span class="cm-number">40</span></pre><pre>    <span class="cm-variable">dim_num_save</span> = <span class="cm-operator">-</span><span class="cm-number">1</span></pre><pre>    <span class="cm-variable">log_max</span> = <span class="cm-number">30</span></pre><pre>    <span class="cm-variable">seed_save</span> = <span class="cm-operator">-</span><span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Initialize (part of) V.</span></pre><pre>    <span class="cm-variable">v</span> = <span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>((<span class="cm-variable">dim_max</span>,<span class="cm-variable">log_max</span>))</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">0</span>:<span class="cm-number">40</span>,<span class="cm-number">0</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">2</span>:<span class="cm-number">40</span>,<span class="cm-number">1</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">3</span>:<span class="cm-number">40</span>,<span class="cm-number">2</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">7</span>, <span class="cm-number">5</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">7</span>, <span class="cm-number">5</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">5</span>, <span class="cm-number">7</span>, <span class="cm-number">7</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">7</span>, <span class="cm-number">5</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">5</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">7</span>, <span class="cm-number">5</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span>, <span class="cm-number">7</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">5</span>, <span class="cm-number">1</span>, <span class="cm-number">1</span>, <span class="cm-number">5</span>, <span class="cm-number">7</span>, <span class="cm-number">7</span>, <span class="cm-number">5</span>, <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">3</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">5</span>:<span class="cm-number">40</span>,<span class="cm-number">3</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">7</span>, <span class="cm-number">9</span>,<span class="cm-number">13</span>,<span class="cm-number">11</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>, <span class="cm-number">3</span>, <span class="cm-number">7</span>, <span class="cm-number">9</span>, <span class="cm-number">5</span>,<span class="cm-number">13</span>,<span class="cm-number">13</span>,<span class="cm-number">11</span>, <span class="cm-number">3</span>,<span class="cm-number">15</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">5</span>, <span class="cm-number">3</span>,<span class="cm-number">15</span>, <span class="cm-number">7</span>, <span class="cm-number">9</span>,<span class="cm-number">13</span>, <span class="cm-number">9</span>, <span class="cm-number">1</span>,<span class="cm-number">11</span>, <span class="cm-number">7</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">5</span>,<span class="cm-number">15</span>, <span class="cm-number">1</span>,<span class="cm-number">15</span>,<span class="cm-number">11</span>, <span class="cm-number">5</span>, <span class="cm-number">3</span>, <span class="cm-number">1</span>, <span class="cm-number">7</span>, <span class="cm-number">9</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">7</span>:<span class="cm-number">40</span>,<span class="cm-number">4</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">9</span>, <span class="cm-number">3</span>,<span class="cm-number">27</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">15</span>,<span class="cm-number">29</span>,<span class="cm-number">21</span>,<span class="cm-number">23</span>,<span class="cm-number">19</span>,<span class="cm-number">11</span>,<span class="cm-number">25</span>, <span class="cm-number">7</span>,<span class="cm-number">13</span>,<span class="cm-number">17</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>,<span class="cm-number">25</span>,<span class="cm-number">29</span>, <span class="cm-number">3</span>,<span class="cm-number">31</span>,<span class="cm-number">11</span>, <span class="cm-number">5</span>,<span class="cm-number">23</span>,<span class="cm-number">27</span>,<span class="cm-number">19</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">21</span>, <span class="cm-number">5</span>, <span class="cm-number">1</span>,<span class="cm-number">17</span>,<span class="cm-number">13</span>, <span class="cm-number">7</span>,<span class="cm-number">15</span>, <span class="cm-number">9</span>,<span class="cm-number">31</span>, <span class="cm-number">9</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">13</span>:<span class="cm-number">40</span>,<span class="cm-number">5</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">37</span>,<span class="cm-number">33</span>, <span class="cm-number">7</span>, <span class="cm-number">5</span>,<span class="cm-number">11</span>,<span class="cm-number">39</span>,<span class="cm-number">63</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">27</span>,<span class="cm-number">17</span>,<span class="cm-number">15</span>,<span class="cm-number">23</span>,<span class="cm-number">29</span>, <span class="cm-number">3</span>,<span class="cm-number">21</span>,<span class="cm-number">13</span>,<span class="cm-number">31</span>,<span class="cm-number">25</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">9</span>,<span class="cm-number">49</span>,<span class="cm-number">33</span>,<span class="cm-number">19</span>,<span class="cm-number">29</span>,<span class="cm-number">11</span>,<span class="cm-number">19</span>,<span class="cm-number">27</span>,<span class="cm-number">15</span>,<span class="cm-number">25</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">19</span>:<span class="cm-number">40</span>,<span class="cm-number">6</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">13</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">33</span>,<span class="cm-number">115</span>, <span class="cm-number">41</span>, <span class="cm-number">79</span>, <span class="cm-number">17</span>, <span class="cm-number">29</span>,<span class="cm-number">119</span>, <span class="cm-number">75</span>, <span class="cm-number">73</span>,<span class="cm-number">105</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">7</span>, <span class="cm-number">59</span>, <span class="cm-number">65</span>, <span class="cm-number">21</span>,  <span class="cm-number">3</span>,<span class="cm-number">113</span>, <span class="cm-number">61</span>, <span class="cm-number">89</span>, <span class="cm-number">45</span>,<span class="cm-number">107</span> ])</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">37</span>:<span class="cm-number">40</span>,<span class="cm-number">7</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">transpose</span>([ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">7</span>, <span class="cm-number">23</span>, <span class="cm-number">39</span> ])</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Set POLY.</span></pre><pre>    <span class="cm-variable">poly</span>= [ <span class="cm-error">\</span></pre><pre>        <span class="cm-number">1</span>,   <span class="cm-number">3</span>,   <span class="cm-number">7</span>,  <span class="cm-number">11</span>,  <span class="cm-number">13</span>,  <span class="cm-number">19</span>,  <span class="cm-number">25</span>,  <span class="cm-number">37</span>,  <span class="cm-number">59</span>,  <span class="cm-number">47</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">61</span>,  <span class="cm-number">55</span>,  <span class="cm-number">41</span>,  <span class="cm-number">67</span>,  <span class="cm-number">97</span>,  <span class="cm-number">91</span>, <span class="cm-number">109</span>, <span class="cm-number">103</span>, <span class="cm-number">115</span>, <span class="cm-number">131</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">193</span>, <span class="cm-number">137</span>, <span class="cm-number">145</span>, <span class="cm-number">143</span>, <span class="cm-number">241</span>, <span class="cm-number">157</span>, <span class="cm-number">185</span>, <span class="cm-number">167</span>, <span class="cm-number">229</span>, <span class="cm-number">171</span>, <span class="cm-error">\</span></pre><pre>        <span class="cm-number">213</span>, <span class="cm-number">191</span>, <span class="cm-number">253</span>, <span class="cm-number">203</span>, <span class="cm-number">211</span>, <span class="cm-number">239</span>, <span class="cm-number">247</span>, <span class="cm-number">285</span>, <span class="cm-number">369</span>, <span class="cm-number">299</span> ]</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">atmost</span> = <span class="cm-number">2</span><span class="cm-operator">**</span><span class="cm-variable">log_max</span> <span class="cm-operator">-</span> <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Find the number of bits in ATMOST.</span></pre><pre>    <span class="cm-variable">maxcol</span> = <span class="cm-variable">i4_bit_hi1</span> ( <span class="cm-variable">atmost</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Initialize row 1 of V.</span></pre><pre>    <span class="cm-variable">v</span>[<span class="cm-number">0</span>,<span class="cm-number">0</span>:<span class="cm-variable">maxcol</span>] = <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Things to do only if the dimension changed.</span></pre><pre>  <span class="cm-keyword">if</span> ( <span class="cm-variable">dim_num</span> <span class="cm-operator">!=</span> <span class="cm-variable">dim_num_save</span> ):</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Check parameters.</span></pre><pre>    <span class="cm-keyword">if</span> ( <span class="cm-variable">dim_num</span> <span class="cm-operator">&lt;</span> <span class="cm-number">1</span> <span class="cm-operator">or</span> <span class="cm-variable">dim_max</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">dim_num</span> ):</pre><pre><span class="cm-error">      </span><span class="cm-keyword">print</span> <span class="cm-string">'I4_SOBOL - Fatal error!'</span></pre><pre><span class="cm-error">      </span><span class="cm-keyword">print</span> <span class="cm-string">'  The spatial dimension DIM_NUM should satisfy:'</span></pre><pre><span class="cm-error">      </span><span class="cm-keyword">print</span> <span class="cm-string">'    1 &lt;= DIM_NUM &lt;= %d'</span><span class="cm-operator">%</span><span class="cm-variable">dim_max</span></pre><pre><span class="cm-error">      </span><span class="cm-keyword">print</span> <span class="cm-string">'  But this input value is DIM_NUM = %d'</span><span class="cm-operator">%</span><span class="cm-variable">dim_num</span></pre><pre><span class="cm-error">      </span><span class="cm-keyword">return</span></pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">dim_num_save</span> = <span class="cm-variable">dim_num</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Initialize the remaining rows of V.</span></pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>(<span class="cm-number">2</span> , <span class="cm-variable">dim_num</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  The bits of the integer POLY(I) gives the form of polynomial I.</span></pre><pre><span class="cm-comment">#  Find the degree of polynomial I from binary encoding.</span></pre><pre>      <span class="cm-variable">j</span> = <span class="cm-variable">poly</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>]</pre><pre>      <span class="cm-variable">m</span> = <span class="cm-number">0</span></pre><pre><span class="cm-error">      </span><span class="cm-keyword">while</span> ( <span class="cm-number">1</span> ):</pre><pre>        <span class="cm-variable">j</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">j</span> <span class="cm-operator">/</span> <span class="cm-number">2.</span> )</pre><pre>        <span class="cm-keyword">if</span> ( <span class="cm-variable">j</span> <span class="cm-operator">&lt;=</span> <span class="cm-number">0</span> ):</pre><pre><span class="cm-error">          </span><span class="cm-keyword">break</span></pre><pre>        <span class="cm-variable">m</span> = <span class="cm-variable">m</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Expand this bit pattern to separate components of the logical array INCLUD.</span></pre><pre>      <span class="cm-variable">j</span> = <span class="cm-variable">poly</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>]</pre><pre>      <span class="cm-variable">includ</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>(<span class="cm-variable">m</span>)</pre><pre><span class="cm-error">      </span><span class="cm-keyword">for</span> <span class="cm-variable">k</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>(<span class="cm-variable">m</span>, <span class="cm-number">0</span>, <span class="cm-operator">-</span><span class="cm-number">1</span>):</pre><pre>        <span class="cm-variable">j2</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">j</span> <span class="cm-operator">/</span> <span class="cm-number">2.</span> )</pre><pre>        <span class="cm-variable">includ</span>[<span class="cm-variable">k</span><span class="cm-operator">-</span><span class="cm-number">1</span>] =  (<span class="cm-variable">j</span> <span class="cm-operator">!=</span> <span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">j2</span> )</pre><pre>        <span class="cm-variable">j</span> = <span class="cm-variable">j2</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Calculate the remaining elements of row I as explained</span></pre><pre><span class="cm-comment">#  in Bratley and Fox, section 2.</span></pre><pre>      <span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>( <span class="cm-variable">m</span><span class="cm-operator">+</span><span class="cm-number">1</span>, <span class="cm-variable">maxcol</span><span class="cm-operator">+</span><span class="cm-number">1</span> ):</pre><pre>        <span class="cm-variable">newv</span> = <span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-variable">m</span><span class="cm-operator">-</span><span class="cm-number">1</span>]</pre><pre>        <span class="cm-variable">l</span> = <span class="cm-number">1</span></pre><pre>        <span class="cm-keyword">for</span> <span class="cm-variable">k</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>(<span class="cm-number">1</span>, <span class="cm-variable">m</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre><span class="cm-error">          </span><span class="cm-variable">l</span> = <span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">l</span></pre><pre><span class="cm-error">          </span><span class="cm-keyword">if</span> ( <span class="cm-variable">includ</span>[<span class="cm-variable">k</span><span class="cm-operator">-</span><span class="cm-number">1</span>] ):</pre><pre>            <span class="cm-variable">newv</span> = <span class="cm-variable">numpy</span>.<span class="cm-variable">bitwise_xor</span> ( <span class="cm-builtin">int</span>(<span class="cm-variable">newv</span>), <span class="cm-builtin">int</span>(<span class="cm-variable">l</span> <span class="cm-operator">*</span> <span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-variable">k</span><span class="cm-operator">-</span><span class="cm-number">1</span>]) )</pre><pre>        <span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">newv</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Multiply columns of V by appropriate power of 2.</span></pre><pre>    <span class="cm-variable">l</span> = <span class="cm-number">1</span></pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">j</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>( <span class="cm-variable">maxcol</span><span class="cm-operator">-</span><span class="cm-number">1</span>, <span class="cm-number">0</span>, <span class="cm-operator">-</span><span class="cm-number">1</span>):</pre><pre><span class="cm-error">      </span><span class="cm-variable">l</span> = <span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">l</span></pre><pre><span class="cm-error">      </span><span class="cm-variable">v</span>[<span class="cm-number">0</span>:<span class="cm-variable">dim_num</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">v</span>[<span class="cm-number">0</span>:<span class="cm-variable">dim_num</span>,<span class="cm-variable">j</span><span class="cm-operator">-</span><span class="cm-number">1</span>] <span class="cm-operator">*</span> <span class="cm-variable">l</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  RECIPD is 1/(common denominator of the elements in V).</span></pre><pre>    <span class="cm-variable">recipd</span> = <span class="cm-number">1.0</span> <span class="cm-operator">/</span> ( <span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">l</span> )</pre><pre>    <span class="cm-variable">lastq</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>(<span class="cm-variable">dim_num</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">seed</span> = <span class="cm-builtin">int</span>(<span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">seed</span> ))</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">&lt;</span> <span class="cm-number">0</span> ):</pre><pre>    <span class="cm-variable">seed</span> = <span class="cm-number">0</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">==</span> <span class="cm-number">0</span> ):</pre><pre>    <span class="cm-variable">l</span> = <span class="cm-number">1</span></pre><pre>    <span class="cm-variable">lastq</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>(<span class="cm-variable">dim_num</span>)</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">elif</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">==</span> <span class="cm-variable">seed_save</span> <span class="cm-operator">+</span> <span class="cm-number">1</span> ):</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Find the position of the right-hand zero in SEED.</span></pre><pre>    <span class="cm-variable">l</span> = <span class="cm-variable">i4_bit_lo0</span> ( <span class="cm-variable">seed</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">elif</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">seed_save</span> ):</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">seed_save</span> = <span class="cm-number">0</span></pre><pre>    <span class="cm-variable">l</span> = <span class="cm-number">1</span></pre><pre>    <span class="cm-variable">lastq</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>(<span class="cm-variable">dim_num</span>)</pre><pre>&nbsp;</pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">seed_temp</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>( <span class="cm-builtin">int</span>(<span class="cm-variable">seed_save</span>), <span class="cm-builtin">int</span>(<span class="cm-variable">seed</span>)):</pre><pre><span class="cm-error">      </span><span class="cm-variable">l</span> = <span class="cm-variable">i4_bit_lo0</span> ( <span class="cm-variable">seed_temp</span> )</pre><pre><span class="cm-error">      </span><span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>(<span class="cm-number">1</span> , <span class="cm-variable">dim_num</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre>        <span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">bitwise_xor</span> ( <span class="cm-builtin">int</span>(<span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>]), <span class="cm-builtin">int</span>(<span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">l</span><span class="cm-operator">-</span><span class="cm-number">1</span>]) )</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">l</span> = <span class="cm-variable">i4_bit_lo0</span> ( <span class="cm-variable">seed</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">elif</span> ( <span class="cm-variable">seed_save</span> <span class="cm-operator">+</span> <span class="cm-number">1</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">seed</span> ):</pre><pre>&nbsp;</pre><pre>    <span class="cm-keyword">for</span> <span class="cm-variable">seed_temp</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>( <span class="cm-builtin">int</span>(<span class="cm-variable">seed_save</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>), <span class="cm-builtin">int</span>(<span class="cm-variable">seed</span>) ):</pre><pre><span class="cm-error">      </span><span class="cm-variable">l</span> = <span class="cm-variable">i4_bit_lo0</span> ( <span class="cm-variable">seed_temp</span> )</pre><pre><span class="cm-error">      </span><span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>(<span class="cm-number">1</span>, <span class="cm-variable">dim_num</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre>        <span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">bitwise_xor</span> ( <span class="cm-builtin">int</span>(<span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>]), <span class="cm-builtin">int</span>(<span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">l</span><span class="cm-operator">-</span><span class="cm-number">1</span>]) )</pre><pre>&nbsp;</pre><pre>    <span class="cm-variable">l</span> = <span class="cm-variable">i4_bit_lo0</span> ( <span class="cm-variable">seed</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Check that the user is not calling too many times!</span></pre><pre>  <span class="cm-keyword">if</span> ( <span class="cm-variable">maxcol</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">l</span> ):</pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'I4_SOBOL - Fatal error!'</span></pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'  Too many calls!'</span></pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'  MAXCOL = %d\n'</span><span class="cm-operator">%</span><span class="cm-variable">maxcol</span></pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'  L =      %d\n'</span><span class="cm-operator">%</span><span class="cm-variable">l</span></pre><pre>    <span class="cm-keyword">return</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Calculate the new components of QUASI.</span></pre><pre>  <span class="cm-variable">quasi</span>=<span class="cm-variable">numpy</span>.<span class="cm-variable">zeros</span>(<span class="cm-variable">dim_num</span>)</pre><pre><span class="cm-error">  </span><span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-operator">in</span> <span class="cm-builtin">xrange</span>( <span class="cm-number">1</span>, <span class="cm-variable">dim_num</span><span class="cm-operator">+</span><span class="cm-number">1</span>):</pre><pre>    <span class="cm-variable">quasi</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>] <span class="cm-operator">*</span> <span class="cm-variable">recipd</span></pre><pre>    <span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>] = <span class="cm-variable">numpy</span>.<span class="cm-variable">bitwise_xor</span> ( <span class="cm-builtin">int</span>(<span class="cm-variable">lastq</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>]), <span class="cm-builtin">int</span>(<span class="cm-variable">v</span>[<span class="cm-variable">i</span><span class="cm-operator">-</span><span class="cm-number">1</span>,<span class="cm-variable">l</span><span class="cm-operator">-</span><span class="cm-number">1</span>]) )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">seed_save</span> = <span class="cm-variable">seed</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">seed</span> = <span class="cm-variable">seed</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> [ <span class="cm-variable">quasi</span>, <span class="cm-variable">seed</span> ]</pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">i4_uniform</span> ( <span class="cm-variable">a</span>, <span class="cm-variable">b</span>, <span class="cm-variable">seed</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  i4_uniform returns a scaled pseudorandom I4.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Discussion:</span></pre><pre><span class="cm-string">    The pseudorandom number will be scaled to be uniformly distributed</span></pre><pre><span class="cm-string">    between A and B.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Reference:</span></pre><pre><span class="cm-string">    Paul Bratley, Bennett Fox, Linus Schrage,</span></pre><pre><span class="cm-string">    A Guide to Simulation,</span></pre><pre><span class="cm-string">    Springer Verlag, pages 201-202, 1983.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Pierre L'Ecuyer,</span></pre><pre><span class="cm-string">    Random Number Generation,</span></pre><pre><span class="cm-string">    in Handbook of Simulation,</span></pre><pre><span class="cm-string">    edited by Jerry Banks,</span></pre><pre><span class="cm-string">    Wiley Interscience, page 95, 1998.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Bennett Fox,</span></pre><pre><span class="cm-string">    Algorithm 647:</span></pre><pre><span class="cm-string">    Implementation and Relative Efficiency of Quasirandom</span></pre><pre><span class="cm-string">    Sequence Generators,</span></pre><pre><span class="cm-string">    ACM Transactions on Mathematical Software,</span></pre><pre><span class="cm-string">    Volume 12, Number 4, pages 362-376, 1986.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Peter Lewis, Allen Goodman, James Miller</span></pre><pre><span class="cm-string">    A Pseudo-Random Number Generator for the System/360,</span></pre><pre><span class="cm-string">    IBM Systems Journal,</span></pre><pre><span class="cm-string">    Volume 8, pages 136-143, 1969.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer A, B, the minimum and maximum acceptable values.</span></pre><pre><span class="cm-string">    Input, integer SEED, a seed for the random number generator.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, integer C, the randomly chosen integer.</span></pre><pre><span class="cm-string">    Output, integer SEED, the updated seed.</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">==</span> <span class="cm-number">0</span> ):</pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'I4_UNIFORM - Fatal error!'</span></pre><pre>    <span class="cm-keyword">print</span> <span class="cm-string">'  Input SEED = 0!'</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">seed</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">seed</span> )</pre><pre><span class="cm-error">  </span><span class="cm-variable">a</span> = <span class="cm-builtin">round</span> ( <span class="cm-variable">a</span> )</pre><pre><span class="cm-error">  </span><span class="cm-variable">b</span> = <span class="cm-builtin">round</span> ( <span class="cm-variable">b</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">seed</span> = <span class="cm-variable">numpy</span>.<span class="cm-variable">mod</span> ( <span class="cm-variable">seed</span>, <span class="cm-number">2147483647</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">&lt;</span> <span class="cm-number">0</span> ) :</pre><pre>    <span class="cm-variable">seed</span> = <span class="cm-variable">seed</span> <span class="cm-operator">+</span> <span class="cm-number">2147483647</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">k</span> = <span class="cm-variable">math</span>.<span class="cm-variable">floor</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">/</span> <span class="cm-number">127773</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">seed</span> = <span class="cm-number">16807</span> <span class="cm-operator">*</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">-</span> <span class="cm-variable">k</span> <span class="cm-operator">*</span> <span class="cm-number">127773</span> ) <span class="cm-operator">-</span> <span class="cm-variable">k</span> <span class="cm-operator">*</span> <span class="cm-number">2836</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> ( <span class="cm-variable">seed</span> <span class="cm-operator">&lt;</span> <span class="cm-number">0</span> ):</pre><pre>    <span class="cm-variable">seed</span> = <span class="cm-variable">seed</span> <span class="cm-operator">+</span> <span class="cm-number">2147483647</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">r</span> = <span class="cm-variable">seed</span> <span class="cm-operator">*</span> <span class="cm-number">4.656612875E-10</span></pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Scale R to lie between A-0.5 and B+0.5.</span></pre><pre>  <span class="cm-variable">r</span> = ( <span class="cm-number">1.0</span> <span class="cm-operator">-</span> <span class="cm-variable">r</span> ) <span class="cm-operator">*</span> ( <span class="cm-builtin">min</span> ( <span class="cm-variable">a</span>, <span class="cm-variable">b</span> ) <span class="cm-operator">-</span> <span class="cm-number">0.5</span> ) <span class="cm-operator">+</span> <span class="cm-variable">r</span> <span class="cm-operator">*</span> ( <span class="cm-builtin">max</span> ( <span class="cm-variable">a</span>, <span class="cm-variable">b</span> ) <span class="cm-operator">+</span> <span class="cm-number">0.5</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-comment">#  Use rounding to convert R to an integer between A and B.</span></pre><pre>  <span class="cm-variable">value</span> = <span class="cm-builtin">round</span> ( <span class="cm-variable">r</span> )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">value</span> = <span class="cm-builtin">max</span> ( <span class="cm-variable">value</span>, <span class="cm-builtin">min</span> ( <span class="cm-variable">a</span>, <span class="cm-variable">b</span> ) )</pre><pre><span class="cm-error">  </span><span class="cm-variable">value</span> = <span class="cm-builtin">min</span> ( <span class="cm-variable">value</span>, <span class="cm-builtin">max</span> ( <span class="cm-variable">a</span>, <span class="cm-variable">b</span> ) )</pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-variable">c</span> = <span class="cm-variable">value</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> [ <span class="cm-builtin">int</span>(<span class="cm-variable">c</span>), <span class="cm-builtin">int</span>(<span class="cm-variable">seed</span>) ]</pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">prime_ge</span> ( <span class="cm-variable">n</span> ):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  PRIME_GE returns the smallest prime greater than or equal to N.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Example:</span></pre><pre><span class="cm-string">    +-----+---------</span></pre><pre><span class="cm-string">    |   N | PRIME_GE</span></pre><pre><span class="cm-string">    +-----+---------</span></pre><pre><span class="cm-string">    | -10 |        2</span></pre><pre><span class="cm-string">    |   1 |        2</span></pre><pre><span class="cm-string">    |   2 |        2</span></pre><pre><span class="cm-string">    |   3 |        3</span></pre><pre><span class="cm-string">    |   4 |        5</span></pre><pre><span class="cm-string">    |   5 |        5</span></pre><pre><span class="cm-string">    |   6 |        7</span></pre><pre><span class="cm-string">    |   7 |        7</span></pre><pre><span class="cm-string">    |   8 |       11</span></pre><pre><span class="cm-string">    |   9 |       11</span></pre><pre><span class="cm-string">    |  10 |       11</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">    Input, integer N, the number to be bounded.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">    Output, integer P, the smallest prime number that is greater</span></pre><pre><span class="cm-string">    than or equal to N.  </span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-variable">p</span> = <span class="cm-builtin">max</span> ( <span class="cm-variable">math</span>.<span class="cm-variable">ceil</span> ( <span class="cm-variable">n</span> ), <span class="cm-number">2</span> )</pre><pre><span class="cm-error">  </span><span class="cm-keyword">while</span> ( <span class="cm-operator">not</span> <span class="cm-variable">is_prime</span> ( <span class="cm-variable">p</span> ) ):</pre><pre>    <span class="cm-variable">p</span> = <span class="cm-variable">p</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></pre><pre>&nbsp;</pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> <span class="cm-variable">p</span></pre><pre>&nbsp;</pre><pre><span class="cm-keyword">def</span> <span class="cm-def">is_prime</span>(<span class="cm-variable">n</span>):</pre><pre><span class="cm-error">  </span><span class="cm-string">"""</span></pre><pre><span class="cm-string">  is_prime returns True if N is a prime number, False otherwise</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">  Parameters:</span></pre><pre><span class="cm-string">     Input, integer N, the number to be checked.</span></pre><pre>&nbsp;</pre><pre><span class="cm-string">     Output, boolean value, True or False</span></pre><pre><span class="cm-string">  """</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">if</span> <span class="cm-variable">n</span><span class="cm-operator">!=</span><span class="cm-builtin">int</span>(<span class="cm-variable">n</span>) <span class="cm-operator">or</span> <span class="cm-variable">n</span><span class="cm-operator">&lt;</span><span class="cm-number">1</span>:</pre><pre>    <span class="cm-keyword">return</span> <span class="cm-builtin">False</span></pre><pre>  <span class="cm-variable">p</span>=<span class="cm-number">2</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">while</span> <span class="cm-variable">p</span><span class="cm-operator">&lt;</span><span class="cm-variable">n</span>:</pre><pre>    <span class="cm-keyword">if</span> <span class="cm-variable">n</span><span class="cm-operator">%</span><span class="cm-variable">p</span><span class="cm-operator">==</span><span class="cm-number">0</span>:</pre><pre><span class="cm-error">      </span><span class="cm-keyword">return</span> <span class="cm-builtin">False</span></pre><pre>    <span class="cm-variable">p</span>+=<span class="cm-number">1</span></pre><pre><span class="cm-error">  </span><span class="cm-keyword">return</span> <span class="cm-builtin">True</span></pre><pre>&nbsp;</pre><pre>&nbsp;</pre></div><div style="left: 0px; top: 7973px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 8477px;"></div><div style="display: none; height: 8477px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div tabindex="2" class="cell border-box-sizing code_cell command_mode rendered unselected"><div class="input"><div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div><div class="inner_cell"><div class="ctb_hideshow ctb_show"><div class="celltoolbar"></div></div><div class="input_area"><div class="CodeMirror cm-s-ipython"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 5.59998px; left: 5.59999px;"><textarea tabindex="0" spellcheck="false" autocapitalize="off" autocorrect="off" style="position: absolute; padding: 0px; width: 1px; height: 1em; outline: medium none;" wrap="off"></textarea></div><div style="left: 0px;" class="CodeMirror-hscrollbar"><div style="height: 1px; width: 0px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px; height: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div draggable="true" tabindex="-1" class="CodeMirror-scroll"><div style="min-width: 11px; margin-left: 0px; min-height: 28px;" class="CodeMirror-sizer"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: medium none;"><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1; display: none;"></div><div style="" class="CodeMirror-code"><pre>&nbsp;</pre></div><div style="left: 0px; top: 0px; height: 17px;" class="CodeMirror-cursor">&nbsp;</div><div style="display: none;" class="CodeMirror-cursor CodeMirror-secondarycursor">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; top: 28px;"></div><div style="display: none; height: 28px;" class="CodeMirror-gutters"></div></div></div></div></div></div><div style="display: none;" class="widget-area"><div class="prompt"><button class="close">×</button></div><div class="widget-subarea"></div></div><div class="output_wrapper"><div title="click to scroll output; double click to hide" class="out_prompt_overlay prompt" style=""></div><div style="" class="output"></div><div title="click to expand output" class="btn output_collapsed" style="display: none;">. . .</div></div></div><div class="end_space"></div></div></div>
        <div title="Click to Show/Hide pager area, drag to Resize" class="ui-draggable border-box-sizing ui-widget ui-state-default" id="pager_splitter"></div>
        <div style="height: 380.8px;" class="border-box-sizing" id="pager">
            <div id="pager_button_area">
            <a style="position: absolute; right: 20px;" class="ui-button" title="Open the pager in an external window" role="button"><span class="ui-icon ui-icon-extlink"></span></a><a style="position: absolute; right: 5px;" class="ui-button" title="Close the pager" role="button"><span class="ui-icon ui-icon-close"></span></a></div>
            <div id="pager-container" class="container border-box-sizing"></div>
        </div>
    </div>

</div>
<div id="tooltip" class="ipython_tooltip" style="display:none"><div class="tooltipbuttons"><a class="ui-button" role="button" href="#"><span class="ui-icon ui-icon-close">Close</span></a><a title="Grow the tooltip vertically (press shift-tab twice)" id="expanbutton" role="button" class="ui-corner-all" href="#"><span class="ui-icon ui-icon-plus">Expand</span></a><a title="show the current docstring in pager (press shift-tab 4 times)" class="ui-button" role="button" href="#"><span class="ui-icon ui-icon-arrowstop-l-n">Open in Pager</span></a><a style="display: none;" title="Tootip is not dismissed while typing for 10 seconds" class="ui-button" role="button" href="#"><span class="ui-icon ui-icon-clock">Close</span></a></div><div class="pretooltiparrow"></div><div class="tooltiptext smalltooltip"></div></div>



</div>

<script src="LIC_files/jquery.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/jquery-ui.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/bootstrap.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/namespace.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/page.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/loginwidget.js" type="text/javascript" charset="utf-8"></script>






<script src="LIC_files/html-css-sanitizer-minified.js" charset="utf-8"></script>
<script src="LIC_files/codemirror.js" charset="utf-8"></script>
<script type="text/javascript">
    CodeMirror.modeURL = "/static/components/codemirror/mode/%N/%N.js";
</script>
<script src="LIC_files/loadmode.js" charset="utf-8"></script>
<script src="LIC_files/multiplex.js" charset="utf-8"></script>
<script src="LIC_files/overlay.js" charset="utf-8"></script>
<script src="LIC_files/matchbrackets.js" charset="utf-8"></script>
<script src="LIC_files/closebrackets.js" charset="utf-8"></script>
<script src="LIC_files/comment.js" charset="utf-8"></script>
<script src="LIC_files/htmlmixed.js" charset="utf-8"></script>
<script src="LIC_files/xml.js" charset="utf-8"></script>
<script src="LIC_files/javascript.js" charset="utf-8"></script>
<script src="LIC_files/css.js" charset="utf-8"></script>
<script src="LIC_files/rst.js" charset="utf-8"></script>
<script src="LIC_files/markdown.js" charset="utf-8"></script>
<script src="LIC_files/gfm.js" charset="utf-8"></script>
<script src="LIC_files/python.js" charset="utf-8"></script>
<script src="LIC_files/codemirror-ipython.js" charset="utf-8"></script>

<script src="LIC_files/highlight.js" charset="utf-8"></script>

<script src="LIC_files/date.js" charset="utf-8"></script>

<script src="LIC_files/events.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/utils.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/keyboard.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/security.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/dialog.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/kernel.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/comm.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/session.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/layoutmanager.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/mathjaxutils.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/outputarea.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/cell.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/celltoolbar.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/codecell.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/completer.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/textcell.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/savewidget.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/quickhelp.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/pager.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/menubar.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/toolbar.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/maintoolbar.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/notebook.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/keyboardmanager.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/notificationwidget.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/notificationarea.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/tooltip.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/tour.js" type="text/javascript" charset="utf-8"></script>

<script src="LIC_files/config.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/main.js" type="text/javascript" charset="utf-8"></script>

<script src="LIC_files/contexthint.js" charset="utf-8"></script>

<script src="LIC_files/default.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/rawcell.js" type="text/javascript" charset="utf-8"></script>
<script src="LIC_files/slideshow.js" type="text/javascript" charset="utf-8"></script>



<script src="LIC_files/custom.js" type="text/javascript" charset="utf-8"></script>



<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px none; margin: 0px;"><div style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px none; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-size-adjust: none; font-family: MathJax_Size1,sans-serif;" id="MathJax_Font_Test"></div></div></body></html>